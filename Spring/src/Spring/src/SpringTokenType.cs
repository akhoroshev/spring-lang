using JetBrains.ReSharper.Plugins.Spring.Util;
using JetBrains.ReSharper.Psi;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using JetBrains.ReSharper.Psi.Parsing;
using JetBrains.Text;
using JetBrains.Util;
using JetBrains.Util.Collections;

namespace JetBrains.ReSharper.Plugins.Spring
{
    public class SpringTokenType : TokenNodeType
    {
        private static readonly HashMap<int, SpringTokenType> AntlrToSpring = new HashMap<int, SpringTokenType>();

        public static readonly SpringTokenType T__0 = new SpringTokenType("T__0", 1);
        public static readonly SpringTokenType T__1 = new SpringTokenType("T__1", 2);
        public static readonly SpringTokenType T__2 = new SpringTokenType("T__2", 3);
        public static readonly SpringTokenType T__3 = new SpringTokenType("T__3", 4);
        public static readonly SpringTokenType T__4 = new SpringTokenType("T__4", 5);
        public static readonly SpringTokenType T__5 = new SpringTokenType("T__5", 6);
        public static readonly SpringTokenType T__6 = new SpringTokenType("T__6", 7);
        public static readonly SpringTokenType T__7 = new SpringTokenType("T__7", 8);
        public static readonly SpringTokenType T__8 = new SpringTokenType("T__8", 9);
        public static readonly SpringTokenType T__9 = new SpringTokenType("T__9", 10);
        public static readonly SpringTokenType T__10 = new SpringTokenType("T__10", 11);
        public static readonly SpringTokenType T__11 = new SpringTokenType("T__11", 12);
        public static readonly SpringTokenType T__12 = new SpringTokenType("T__12", 13);
        public static readonly SpringTokenType T__13 = new SpringTokenType("T__13", 14);
        public static readonly SpringTokenType T__14 = new SpringTokenType("T__14", 15);
        public static readonly SpringTokenType T__15 = new SpringTokenType("T__15", 16);
        public static readonly SpringTokenType T__16 = new SpringTokenType("T__16", 17);
        public static readonly SpringTokenType T__17 = new SpringTokenType("T__17", 18);
        public static readonly SpringTokenType T__18 = new SpringTokenType("T__18", 19);
        public static readonly SpringTokenType T__19 = new SpringTokenType("T__19", 20);
        public static readonly SpringTokenType T__20 = new SpringTokenType("T__20", 21);
        public static readonly SpringTokenType T__21 = new SpringTokenType("T__21", 22);
        public static readonly SpringTokenType T__22 = new SpringTokenType("T__22", 23);
        public static readonly SpringTokenType T__23 = new SpringTokenType("T__23", 24);
        public static readonly SpringTokenType T__24 = new SpringTokenType("T__24", 25);
        public static readonly SpringTokenType T__25 = new SpringTokenType("T__25", 26);
        public static readonly SpringTokenType T__26 = new SpringTokenType("T__26", 27);
        public static readonly SpringTokenType T__27 = new SpringTokenType("T__27", 28);
        public static readonly SpringTokenType T__28 = new SpringTokenType("T__28", 29);
        public static readonly SpringTokenType T__29 = new SpringTokenType("T__29", 30);
        public static readonly SpringTokenType T__30 = new SpringTokenType("T__30", 31);
        public static readonly SpringTokenType T__31 = new SpringTokenType("T__31", 32);
        public static readonly SpringTokenType T__32 = new SpringTokenType("T__32", 33);
        public static readonly SpringTokenType T__33 = new SpringTokenType("T__33", 34);
        public static readonly SpringTokenType T__34 = new SpringTokenType("T__34", 35);
        public static readonly SpringTokenType T__35 = new SpringTokenType("T__35", 36);
        public static readonly SpringTokenType T__36 = new SpringTokenType("T__36", 37);
        public static readonly SpringTokenType T__37 = new SpringTokenType("T__37", 38);
        public static readonly SpringTokenType T__38 = new SpringTokenType("T__38", 39);
        public static readonly SpringTokenType T__39 = new SpringTokenType("T__39", 40);
        public static readonly SpringTokenType T__40 = new SpringTokenType("T__40", 41);
        public static readonly SpringTokenType T__41 = new SpringTokenType("T__41", 42);
        public static readonly SpringTokenType T__42 = new SpringTokenType("T__42", 43);
        public static readonly SpringTokenType T__43 = new SpringTokenType("T__43", 44);
        public static readonly SpringTokenType T__44 = new SpringTokenType("T__44", 45);
        public static readonly SpringTokenType T__45 = new SpringTokenType("T__45", 46);
        public static readonly SpringTokenType T__46 = new SpringTokenType("T__46", 47);
        public static readonly SpringTokenType T__47 = new SpringTokenType("T__47", 48);
        public static readonly SpringTokenType T__48 = new SpringTokenType("T__48", 49);
        public static readonly SpringTokenType T__49 = new SpringTokenType("T__49", 50);
        public static readonly SpringTokenType T__50 = new SpringTokenType("T__50", 51);
        public static readonly SpringTokenType T__51 = new SpringTokenType("T__51", 52);
        public static readonly SpringTokenType T__52 = new SpringTokenType("T__52", 53);
        public static readonly SpringTokenType T__53 = new SpringTokenType("T__53", 54);
        public static readonly SpringTokenType T__54 = new SpringTokenType("T__54", 55);
        public static readonly SpringTokenType T__55 = new SpringTokenType("T__55", 56);
        public static readonly SpringTokenType T__56 = new SpringTokenType("T__56", 57);
        public static readonly SpringTokenType T__57 = new SpringTokenType("T__57", 58);
        public static readonly SpringTokenType T__58 = new SpringTokenType("T__58", 59);
        public static readonly SpringTokenType T__59 = new SpringTokenType("T__59", 60);
        public static readonly SpringTokenType T__60 = new SpringTokenType("T__60", 61);
        public static readonly SpringTokenType T__61 = new SpringTokenType("T__61", 62);
        public static readonly SpringTokenType T__62 = new SpringTokenType("T__62", 63);
        public static readonly SpringTokenType T__63 = new SpringTokenType("T__63", 64);
        public static readonly SpringTokenType T__64 = new SpringTokenType("T__64", 65);
        public static readonly SpringTokenType T__65 = new SpringTokenType("T__65", 66);
        public static readonly SpringTokenType T__66 = new SpringTokenType("T__66", 67);
        public static readonly SpringTokenType T__67 = new SpringTokenType("T__67", 68);
        public static readonly SpringTokenType T__68 = new SpringTokenType("T__68", 69);
        public static readonly SpringTokenType T__69 = new SpringTokenType("T__69", 70);
        public static readonly SpringTokenType T__70 = new SpringTokenType("T__70", 71);
        public static readonly SpringTokenType T__71 = new SpringTokenType("T__71", 72);
        public static readonly SpringTokenType T__72 = new SpringTokenType("T__72", 73);
        public static readonly SpringTokenType T__73 = new SpringTokenType("T__73", 74);
        public static readonly SpringTokenType T__74 = new SpringTokenType("T__74", 75);
        public static readonly SpringTokenType T__75 = new SpringTokenType("T__75", 76);
        public static readonly SpringTokenType T__76 = new SpringTokenType("T__76", 77);
        public static readonly SpringTokenType T__77 = new SpringTokenType("T__77", 78);
        public static readonly SpringTokenType T__78 = new SpringTokenType("T__78", 79);
        public static readonly SpringTokenType T__79 = new SpringTokenType("T__79", 80);
        public static readonly SpringTokenType T__80 = new SpringTokenType("T__80", 81);
        public static readonly SpringTokenType T__81 = new SpringTokenType("T__81", 82);
        public static readonly SpringTokenType T__82 = new SpringTokenType("T__82", 83);
        public static readonly SpringTokenType T__83 = new SpringTokenType("T__83", 84);
        public static readonly SpringTokenType T__84 = new SpringTokenType("T__84", 85);
        public static readonly SpringTokenType T__85 = new SpringTokenType("T__85", 86);
        public static readonly SpringTokenType T__86 = new SpringTokenType("T__86", 87);
        public static readonly SpringTokenType T__87 = new SpringTokenType("T__87", 88);
        public static readonly SpringTokenType T__88 = new SpringTokenType("T__88", 89);
        public static readonly SpringTokenType T__89 = new SpringTokenType("T__89", 90);
        public static readonly SpringTokenType T__90 = new SpringTokenType("T__90", 91);
        public static readonly SpringTokenType T__91 = new SpringTokenType("T__91", 92);
        public static readonly SpringTokenType INT = new SpringTokenType("Int", 93);
        public static readonly SpringTokenType UINT = new SpringTokenType("Uint", 94);
        public static readonly SpringTokenType BYTE = new SpringTokenType("Byte", 95);
        public static readonly SpringTokenType FIXED = new SpringTokenType("Fixed", 96);
        public static readonly SpringTokenType UFIXED = new SpringTokenType("Ufixed", 97);
        public static readonly SpringTokenType BOOLEANLITERAL = new SpringTokenType("BooleanLiteral", 98);
        public static readonly SpringTokenType DECIMALNUMBER = new SpringTokenType("DecimalNumber", 99);
        public static readonly SpringTokenType HEXNUMBER = new SpringTokenType("HexNumber", 100);
        public static readonly SpringTokenType NUMBERUNIT = new SpringTokenType("NumberUnit", 101);
        public static readonly SpringTokenType HEXLITERALFRAGMENT = new SpringTokenType("HexLiteralFragment", 102);
        public static readonly SpringTokenType RESERVEDKEYWORD = new SpringTokenType("ReservedKeyword", 103);
        public static readonly SpringTokenType ANONYMOUSKEYWORD = new SpringTokenType("AnonymousKeyword", 104);
        public static readonly SpringTokenType BREAKKEYWORD = new SpringTokenType("BreakKeyword", 105);
        public static readonly SpringTokenType CONSTANTKEYWORD = new SpringTokenType("ConstantKeyword", 106);
        public static readonly SpringTokenType IMMUTABLEKEYWORD = new SpringTokenType("ImmutableKeyword", 107);
        public static readonly SpringTokenType CONTINUEKEYWORD = new SpringTokenType("ContinueKeyword", 108);
        public static readonly SpringTokenType LEAVEKEYWORD = new SpringTokenType("LeaveKeyword", 109);
        public static readonly SpringTokenType EXTERNALKEYWORD = new SpringTokenType("ExternalKeyword", 110);
        public static readonly SpringTokenType INDEXEDKEYWORD = new SpringTokenType("IndexedKeyword", 111);
        public static readonly SpringTokenType INTERNALKEYWORD = new SpringTokenType("InternalKeyword", 112);
        public static readonly SpringTokenType PAYABLEKEYWORD = new SpringTokenType("PayableKeyword", 113);
        public static readonly SpringTokenType PRIVATEKEYWORD = new SpringTokenType("PrivateKeyword", 114);
        public static readonly SpringTokenType PUBLICKEYWORD = new SpringTokenType("PublicKeyword", 115);
        public static readonly SpringTokenType VIRTUALKEYWORD = new SpringTokenType("VirtualKeyword", 116);
        public static readonly SpringTokenType PUREKEYWORD = new SpringTokenType("PureKeyword", 117);
        public static readonly SpringTokenType TYPEKEYWORD = new SpringTokenType("TypeKeyword", 118);
        public static readonly SpringTokenType VIEWKEYWORD = new SpringTokenType("ViewKeyword", 119);
        public static readonly SpringTokenType CONSTRUCTORKEYWORD = new SpringTokenType("ConstructorKeyword", 120);
        public static readonly SpringTokenType FALLBACKKEYWORD = new SpringTokenType("FallbackKeyword", 121);
        public static readonly SpringTokenType RECEIVEKEYWORD = new SpringTokenType("ReceiveKeyword", 122);
        public static readonly SpringTokenType IDENTIFIER = new SpringTokenType("Identifier", 123);
        public static readonly SpringTokenType STRINGLITERALFRAGM = new SpringTokenType("StringLiteralFragment", 124);
        public static readonly SpringTokenType VERSIONLITERAL = new SpringTokenType("VersionLiteral", 125);
        public static readonly SpringTokenType WS = new SpringTokenType("WS", 126);
        public static readonly SpringTokenType COMMENT = new SpringTokenType("COMMENT", 127);
        public static readonly SpringTokenType LINE_COMMENT = new SpringTokenType("LINE_COMMENT", 128);
        public static readonly SpringTokenType PRAGMA = new SpringTokenType("pragma", 1);
        public static readonly SpringTokenType SEMICOLON = new SpringTokenType(";", 2);
        public static readonly SpringTokenType CIRCUMFLEX_ACCENT = new SpringTokenType("^", 3);
        public static readonly SpringTokenType TILDE = new SpringTokenType("~", 4);
        public static readonly SpringTokenType GREATER_THAN_SIGNEQUALS_SIGN = new SpringTokenType(">=", 5);
        public static readonly SpringTokenType GREATER_THAN_SIGN = new SpringTokenType(">", 6);
        public static readonly SpringTokenType LESS_THAN_SIGN = new SpringTokenType("<", 7);
        public static readonly SpringTokenType LESS_THAN_SIGNEQUALS_SIGN = new SpringTokenType("<=", 8);
        public static readonly SpringTokenType EQUALS_SIGN = new SpringTokenType("=", 9);
        public static readonly SpringTokenType IMPORT = new SpringTokenType("import", 10);
        public static readonly SpringTokenType AS = new SpringTokenType("as", 11);
        public static readonly SpringTokenType ASTERISK = new SpringTokenType("*", 12);
        public static readonly SpringTokenType FROM = new SpringTokenType("from", 13);
        public static readonly SpringTokenType LEFT_CURLY_BRACKET = new SpringTokenType("{", 14);
        public static readonly SpringTokenType COMMA = new SpringTokenType(",", 15);
        public static readonly SpringTokenType RIGHT_CURLY_BRACKET = new SpringTokenType("}", 16);
        public static readonly SpringTokenType ABSTRACT = new SpringTokenType("abstract", 17);
        public static readonly SpringTokenType CONTRACT = new SpringTokenType("contract", 18);
        public static readonly SpringTokenType INTERFACE = new SpringTokenType("interface", 19);
        public static readonly SpringTokenType LIBRARY = new SpringTokenType("library", 20);
        public static readonly SpringTokenType IS = new SpringTokenType("is", 21);
        public static readonly SpringTokenType LEFT_PARENTHESIS = new SpringTokenType("(", 22);
        public static readonly SpringTokenType RIGHT_PARENTHESIS = new SpringTokenType(")", 23);
        public static readonly SpringTokenType OVERRIDE = new SpringTokenType("override", 24);
        public static readonly SpringTokenType USING = new SpringTokenType("using", 25);
        public static readonly SpringTokenType FOR = new SpringTokenType("for", 26);
        public static readonly SpringTokenType STRUCT = new SpringTokenType("struct", 27);
        public static readonly SpringTokenType MODIFIER = new SpringTokenType("modifier", 28);
        public static readonly SpringTokenType FUNCTION = new SpringTokenType("function", 29);
        public static readonly SpringTokenType RETURNS = new SpringTokenType("returns", 30);
        public static readonly SpringTokenType EVENT = new SpringTokenType("event", 31);
        public static readonly SpringTokenType ENUM = new SpringTokenType("enum", 32);
        public static readonly SpringTokenType LEFT_SQUARE_BRACKET = new SpringTokenType("[", 33);
        public static readonly SpringTokenType RIGHT_SQUARE_BRACKET = new SpringTokenType("]", 34);
        public static readonly SpringTokenType FULL_STOP = new SpringTokenType(".", 35);
        public static readonly SpringTokenType MAPPING = new SpringTokenType("mapping", 36);
        public static readonly SpringTokenType EQUALS_SIGNGREATER_THAN_SIGN = new SpringTokenType("=>", 37);
        public static readonly SpringTokenType MEMORY = new SpringTokenType("memory", 38);
        public static readonly SpringTokenType STORAGE = new SpringTokenType("storage", 39);
        public static readonly SpringTokenType CALLDATA = new SpringTokenType("calldata", 40);
        public static readonly SpringTokenType IF = new SpringTokenType("if", 41);
        public static readonly SpringTokenType ELSE = new SpringTokenType("else", 42);
        public static readonly SpringTokenType TRY = new SpringTokenType("try", 43);
        public static readonly SpringTokenType CATCH = new SpringTokenType("catch", 44);
        public static readonly SpringTokenType WHILE = new SpringTokenType("while", 45);
        public static readonly SpringTokenType ASSEMBLY = new SpringTokenType("assembly", 46);
        public static readonly SpringTokenType DO = new SpringTokenType("do", 47);
        public static readonly SpringTokenType RETURN = new SpringTokenType("return", 48);
        public static readonly SpringTokenType THROW = new SpringTokenType("throw", 49);
        public static readonly SpringTokenType EMIT = new SpringTokenType("emit", 50);
        public static readonly SpringTokenType VAR = new SpringTokenType("var", 51);
        public static readonly SpringTokenType ADDRESS = new SpringTokenType("address", 52);
        public static readonly SpringTokenType BOOL = new SpringTokenType("bool", 53);
        public static readonly SpringTokenType STRING = new SpringTokenType("string", 54);
        public static readonly SpringTokenType BYTE_SMALL = new SpringTokenType("byte", 55);
        public static readonly SpringTokenType PLUS_SIGNPLUS_SIGN = new SpringTokenType("++", 56);
        public static readonly SpringTokenType HYPHEN_MINUSHYPHEN_MINUS = new SpringTokenType("--", 57);
        public static readonly SpringTokenType NEW = new SpringTokenType("new", 58);
        public static readonly SpringTokenType COLON = new SpringTokenType(":", 59);
        public static readonly SpringTokenType PLUS_SIGN = new SpringTokenType("+", 60);
        public static readonly SpringTokenType HYPHEN_MINUS = new SpringTokenType("-", 61);
        public static readonly SpringTokenType AFTER = new SpringTokenType("after", 62);
        public static readonly SpringTokenType DELETE = new SpringTokenType("delete", 63);
        public static readonly SpringTokenType EXCLAMATION_MARK = new SpringTokenType("!", 64);
        public static readonly SpringTokenType ASTERISKASTERISK = new SpringTokenType("**", 65);
        public static readonly SpringTokenType SOLIDUS = new SpringTokenType("/", 66);
        public static readonly SpringTokenType PERCENT_SIGN = new SpringTokenType("%", 67);
        public static readonly SpringTokenType LESS_THAN_SIGNLESS_THAN_SIGN = new SpringTokenType("<<", 68);
        public static readonly SpringTokenType GREATER_THAN_SIGNGREATER_THAN_SIGN = new SpringTokenType(">>", 69);
        public static readonly SpringTokenType AMPERSAND = new SpringTokenType("&", 70);
        public static readonly SpringTokenType VERTICAL_LINE = new SpringTokenType("|", 71);
        public static readonly SpringTokenType EQUALS_SIGNEQUALS_SIGN = new SpringTokenType("==", 72);
        public static readonly SpringTokenType EXCLAMATION_MARKEQUALS_SIGN = new SpringTokenType("!=", 73);
        public static readonly SpringTokenType AMPERSANDAMPERSAND = new SpringTokenType("&&", 74);
        public static readonly SpringTokenType VERTICAL_LINEVERTICAL_LINE = new SpringTokenType("||", 75);
        public static readonly SpringTokenType QUESTION_MARK = new SpringTokenType("?", 76);
        public static readonly SpringTokenType VERTICAL_LINEEQUALS_SIGN = new SpringTokenType("|=", 77);
        public static readonly SpringTokenType CIRCUMFLEX_ACCENTEQUALS_SIGN = new SpringTokenType("^=", 78);
        public static readonly SpringTokenType AMPERSANDEQUALS_SIGN = new SpringTokenType("&=", 79);
        public static readonly SpringTokenType LESS_THAN_SIGNLESS_THAN_SIGNEQUALS_SIGN = new SpringTokenType("<<=", 80);
        public static readonly SpringTokenType GREATER_THAN_SIGNGREATER_THAN_EQUALS = new SpringTokenType(">>=", 81);
        public static readonly SpringTokenType PLUS_SIGNEQUALS_SIGN = new SpringTokenType("+=", 82);
        public static readonly SpringTokenType HYPHEN_MINUSEQUALS_SIGN = new SpringTokenType("-=", 83);
        public static readonly SpringTokenType ASTERISKEQUALS_SIGN = new SpringTokenType("*=", 84);
        public static readonly SpringTokenType SOLIDUSEQUALS_SIGN = new SpringTokenType("/=", 85);
        public static readonly SpringTokenType PERCENT_SIGNEQUALS_SIGN = new SpringTokenType("%=", 86);
        public static readonly SpringTokenType LET = new SpringTokenType("let", 87);
        public static readonly SpringTokenType COLONEQUALS_SIGN = new SpringTokenType(":=", 88);
        public static readonly SpringTokenType EQUALS_SIGNCOLON = new SpringTokenType("=:", 89);
        public static readonly SpringTokenType SWITCH = new SpringTokenType("switch", 90);
        public static readonly SpringTokenType CASE = new SpringTokenType("case", 91);
        public static readonly SpringTokenType DEFAULT = new SpringTokenType("default", 92);
        public static readonly SpringTokenType ANONYMOUS = new SpringTokenType("anonymous", 104);
        public static readonly SpringTokenType BREAK = new SpringTokenType("break", 105);
        public static readonly SpringTokenType CONSTANT = new SpringTokenType("constant", 106);
        public static readonly SpringTokenType IMMUTABLE = new SpringTokenType("immutable", 107);
        public static readonly SpringTokenType CONTINUE = new SpringTokenType("continue", 108);
        public static readonly SpringTokenType LEAVE = new SpringTokenType("leave", 109);
        public static readonly SpringTokenType EXTERNAL = new SpringTokenType("external", 110);
        public static readonly SpringTokenType INDEXED = new SpringTokenType("indexed", 111);
        public static readonly SpringTokenType INTERNAL = new SpringTokenType("internal", 112);
        public static readonly SpringTokenType PAYABLE = new SpringTokenType("payable", 113);
        public static readonly SpringTokenType PRIVATE = new SpringTokenType("private", 114);
        public static readonly SpringTokenType PUBLIC = new SpringTokenType("public", 115);
        public static readonly SpringTokenType VIRTUAL = new SpringTokenType("virtual", 116);
        public static readonly SpringTokenType PURE = new SpringTokenType("pure", 117);
        public static readonly SpringTokenType TYPE = new SpringTokenType("type", 118);
        public static readonly SpringTokenType VIEW = new SpringTokenType("view", 119);
        public static readonly SpringTokenType CONSTRUCTOR = new SpringTokenType("constructor", 120);
        public static readonly SpringTokenType FALLBACK = new SpringTokenType("fallback", 121);
        public static readonly SpringTokenType RECEIVE = new SpringTokenType("receive", 122);

        private SpringTokenType(string s, int index) : base(s, index)
        {
            Logger.Default.Log($"New SpringTokenType {s} {index}");
            AntlrToSpring[index] = this;
        }

        public static SpringTokenType CreateFromAntlrIndex(int index)
        {
            Logger.Default.Log($"Lookup index {index}");
            if (AntlrToSpring.ContainsKey(index))
            {
                Logger.Default.Log($"Index found {index}");
                return AntlrToSpring[index];
            }

            Logger.Default.Log($"Index not found {index}");
            return null;
        }

        public override LeafElementBase Create(IBuffer buffer, TreeOffset startOffset, TreeOffset endOffset)
        {
            return new SpringGenericToken(buffer.GetText(new TextRange(startOffset.Offset, endOffset.Offset)), this);
        }

        public override bool IsWhitespace => this == WS;
        public override bool IsComment => this == COMMENT || this == LINE_COMMENT;
        public override bool IsStringLiteral => this == STRING;
        public override bool IsConstantLiteral => this == NUMBERUNIT;
        public override bool IsIdentifier => this == IDENTIFIER;
        public override bool IsKeyword => this == FOR || this == IF || this == RETURN || this == PUBLIC;

        public override string TokenRepresentation { get; }
    }
}