//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/akhoroshev/Documents/spring-lang/Spring/src/Spring/src/grammar/Toylang.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class ToylangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, KW_RETURN=7, KW_ELSE=8, 
		KW_IF=9, KW_FUN=10, KW_VAR=11, KW_WHILE=12, OP_LOGICAL=13, OP_EQ=14, OP_ADDITIONAL=15, 
		OP_COMPARE=16, OP_MULTIPLY=17, IDENTIFIER=18, INTEGER_LITERAL=19, COMMENT=20, 
		WS=21, UNKNOWN=22;
	public const int
		RULE_file = 0, RULE_block = 1, RULE_blockWithBraces = 2, RULE_statement = 3, 
		RULE_stmtComment = 4, RULE_stmtFunction = 5, RULE_stmtVariable = 6, RULE_functionParameterNames = 7, 
		RULE_functionParameter = 8, RULE_stmtWhile = 9, RULE_stmtIf = 10, RULE_stmtAssigment = 11, 
		RULE_stmtReturn = 12, RULE_stmtExpression = 13, RULE_functionCall = 14, 
		RULE_functionArguments = 15, RULE_binaryExpression = 16, RULE_logicalExpression = 17, 
		RULE_eqExpression = 18, RULE_compareExpression = 19, RULE_additionExpression = 20, 
		RULE_multiplyExpression = 21, RULE_atomExpression = 22, RULE_identifier = 23, 
		RULE_integralLiteral = 24;
	public static readonly string[] ruleNames = {
		"file", "block", "blockWithBraces", "statement", "stmtComment", "stmtFunction", 
		"stmtVariable", "functionParameterNames", "functionParameter", "stmtWhile", 
		"stmtIf", "stmtAssigment", "stmtReturn", "stmtExpression", "functionCall", 
		"functionArguments", "binaryExpression", "logicalExpression", "eqExpression", 
		"compareExpression", "additionExpression", "multiplyExpression", "atomExpression", 
		"identifier", "integralLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'('", "')'", "'='", "','", "'return'", "'else'", 
		"'if'", "'fun'", "'var'", "'while'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "KW_RETURN", "KW_ELSE", "KW_IF", 
		"KW_FUN", "KW_VAR", "KW_WHILE", "OP_LOGICAL", "OP_EQ", "OP_ADDITIONAL", 
		"OP_COMPARE", "OP_MULTIPLY", "IDENTIFIER", "INTEGER_LITERAL", "COMMENT", 
		"WS", "UNKNOWN"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Toylang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ToylangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ToylangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ToylangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(ToylangParser.Eof, 0); }
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IToylangVisitor<TResult> typedVisitor = visitor as IToylangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		try {
			State = 54;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case KW_RETURN:
			case KW_IF:
			case KW_FUN:
			case KW_VAR:
			case KW_WHILE:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case COMMENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 50; block();
				State = 51; Match(Eof);
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				State = 53; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IToylangVisitor<TResult> typedVisitor = visitor as IToylangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 56; statement();
				}
				}
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << KW_RETURN) | (1L << KW_IF) | (1L << KW_FUN) | (1L << KW_VAR) | (1L << KW_WHILE) | (1L << IDENTIFIER) | (1L << INTEGER_LITERAL) | (1L << COMMENT))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockWithBracesContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockWithBracesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockWithBraces; } }
		public override void EnterRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.EnterBlockWithBraces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.ExitBlockWithBraces(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IToylangVisitor<TResult> typedVisitor = visitor as IToylangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockWithBraces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockWithBracesContext blockWithBraces() {
		BlockWithBracesContext _localctx = new BlockWithBracesContext(Context, State);
		EnterRule(_localctx, 4, RULE_blockWithBraces);
		try {
			State = 67;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 61; Match(T__0);
				State = 62; block();
				State = 63; Match(T__1);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 65; Match(T__0);
				State = 66; Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StmtFunctionContext stmtFunction() {
			return GetRuleContext<StmtFunctionContext>(0);
		}
		public StmtVariableContext stmtVariable() {
			return GetRuleContext<StmtVariableContext>(0);
		}
		public StmtExpressionContext stmtExpression() {
			return GetRuleContext<StmtExpressionContext>(0);
		}
		public StmtWhileContext stmtWhile() {
			return GetRuleContext<StmtWhileContext>(0);
		}
		public StmtIfContext stmtIf() {
			return GetRuleContext<StmtIfContext>(0);
		}
		public StmtAssigmentContext stmtAssigment() {
			return GetRuleContext<StmtAssigmentContext>(0);
		}
		public StmtReturnContext stmtReturn() {
			return GetRuleContext<StmtReturnContext>(0);
		}
		public StmtCommentContext stmtComment() {
			return GetRuleContext<StmtCommentContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IToylangVisitor<TResult> typedVisitor = visitor as IToylangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 77;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 69; stmtFunction();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 70; stmtVariable();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 71; stmtExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 72; stmtWhile();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 73; stmtIf();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 74; stmtAssigment();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 75; stmtReturn();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 76; stmtComment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtCommentContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(ToylangParser.COMMENT, 0); }
		public StmtCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtComment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.EnterStmtComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.ExitStmtComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IToylangVisitor<TResult> typedVisitor = visitor as IToylangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtCommentContext stmtComment() {
		StmtCommentContext _localctx = new StmtCommentContext(Context, State);
		EnterRule(_localctx, 8, RULE_stmtComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtFunctionContext : ParserRuleContext {
		public ITerminalNode KW_FUN() { return GetToken(ToylangParser.KW_FUN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FunctionParameterNamesContext functionParameterNames() {
			return GetRuleContext<FunctionParameterNamesContext>(0);
		}
		public BlockWithBracesContext blockWithBraces() {
			return GetRuleContext<BlockWithBracesContext>(0);
		}
		public StmtFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.EnterStmtFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.ExitStmtFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IToylangVisitor<TResult> typedVisitor = visitor as IToylangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtFunctionContext stmtFunction() {
		StmtFunctionContext _localctx = new StmtFunctionContext(Context, State);
		EnterRule(_localctx, 10, RULE_stmtFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(KW_FUN);
			State = 82; identifier();
			State = 83; Match(T__2);
			State = 84; functionParameterNames();
			State = 85; Match(T__3);
			State = 86; blockWithBraces();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtVariableContext : ParserRuleContext {
		public ITerminalNode KW_VAR() { return GetToken(ToylangParser.KW_VAR, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StmtExpressionContext stmtExpression() {
			return GetRuleContext<StmtExpressionContext>(0);
		}
		public StmtVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.EnterStmtVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.ExitStmtVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IToylangVisitor<TResult> typedVisitor = visitor as IToylangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtVariableContext stmtVariable() {
		StmtVariableContext _localctx = new StmtVariableContext(Context, State);
		EnterRule(_localctx, 12, RULE_stmtVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; Match(KW_VAR);
			State = 89; identifier();
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 90; Match(T__4);
				State = 91; stmtExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterNamesContext : ParserRuleContext {
		public FunctionParameterContext _functionParameter;
		public IList<FunctionParameterContext> _parameters = new List<FunctionParameterContext>();
		public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		public FunctionParameterNamesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameterNames; } }
		public override void EnterRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.EnterFunctionParameterNames(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.ExitFunctionParameterNames(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IToylangVisitor<TResult> typedVisitor = visitor as IToylangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameterNames(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterNamesContext functionParameterNames() {
		FunctionParameterNamesContext _localctx = new FunctionParameterNamesContext(Context, State);
		EnterRule(_localctx, 14, RULE_functionParameterNames);
		int _la;
		try {
			State = 103;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 94; _localctx._functionParameter = functionParameter();
				_localctx._parameters.Add(_localctx._functionParameter);
				}
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 95; Match(T__5);
					State = 96; _localctx._functionParameter = functionParameter();
					_localctx._parameters.Add(_localctx._functionParameter);
					}
					}
					State = 101;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.EnterFunctionParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.ExitFunctionParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IToylangVisitor<TResult> typedVisitor = visitor as IToylangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtWhileContext : ParserRuleContext {
		public ITerminalNode KW_WHILE() { return GetToken(ToylangParser.KW_WHILE, 0); }
		public StmtExpressionContext stmtExpression() {
			return GetRuleContext<StmtExpressionContext>(0);
		}
		public BlockWithBracesContext blockWithBraces() {
			return GetRuleContext<BlockWithBracesContext>(0);
		}
		public StmtWhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtWhile; } }
		public override void EnterRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.EnterStmtWhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.ExitStmtWhile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IToylangVisitor<TResult> typedVisitor = visitor as IToylangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtWhileContext stmtWhile() {
		StmtWhileContext _localctx = new StmtWhileContext(Context, State);
		EnterRule(_localctx, 18, RULE_stmtWhile);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; Match(KW_WHILE);
			State = 108; Match(T__2);
			State = 109; stmtExpression();
			State = 110; Match(T__3);
			State = 111; blockWithBraces();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtIfContext : ParserRuleContext {
		public BlockWithBracesContext branchThen;
		public BlockWithBracesContext branchElse;
		public ITerminalNode KW_IF() { return GetToken(ToylangParser.KW_IF, 0); }
		public StmtExpressionContext stmtExpression() {
			return GetRuleContext<StmtExpressionContext>(0);
		}
		public BlockWithBracesContext[] blockWithBraces() {
			return GetRuleContexts<BlockWithBracesContext>();
		}
		public BlockWithBracesContext blockWithBraces(int i) {
			return GetRuleContext<BlockWithBracesContext>(i);
		}
		public ITerminalNode KW_ELSE() { return GetToken(ToylangParser.KW_ELSE, 0); }
		public StmtIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.EnterStmtIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.ExitStmtIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IToylangVisitor<TResult> typedVisitor = visitor as IToylangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtIfContext stmtIf() {
		StmtIfContext _localctx = new StmtIfContext(Context, State);
		EnterRule(_localctx, 20, RULE_stmtIf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; Match(KW_IF);
			State = 114; Match(T__2);
			State = 115; stmtExpression();
			State = 116; Match(T__3);
			{
			State = 117; _localctx.branchThen = blockWithBraces();
			}
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_ELSE) {
				{
				State = 118; Match(KW_ELSE);
				State = 119; _localctx.branchElse = blockWithBraces();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtAssigmentContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StmtExpressionContext stmtExpression() {
			return GetRuleContext<StmtExpressionContext>(0);
		}
		public StmtAssigmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtAssigment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.EnterStmtAssigment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.ExitStmtAssigment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IToylangVisitor<TResult> typedVisitor = visitor as IToylangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtAssigment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtAssigmentContext stmtAssigment() {
		StmtAssigmentContext _localctx = new StmtAssigmentContext(Context, State);
		EnterRule(_localctx, 22, RULE_stmtAssigment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122; identifier();
			State = 123; Match(T__4);
			State = 124; stmtExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtReturnContext : ParserRuleContext {
		public ITerminalNode KW_RETURN() { return GetToken(ToylangParser.KW_RETURN, 0); }
		public StmtExpressionContext stmtExpression() {
			return GetRuleContext<StmtExpressionContext>(0);
		}
		public StmtReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtReturn; } }
		public override void EnterRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.EnterStmtReturn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.ExitStmtReturn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IToylangVisitor<TResult> typedVisitor = visitor as IToylangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtReturnContext stmtReturn() {
		StmtReturnContext _localctx = new StmtReturnContext(Context, State);
		EnterRule(_localctx, 24, RULE_stmtReturn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126; Match(KW_RETURN);
			State = 127; stmtExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtExpressionContext : ParserRuleContext {
		public BinaryExpressionContext binaryExpression() {
			return GetRuleContext<BinaryExpressionContext>(0);
		}
		public StmtExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.EnterStmtExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.ExitStmtExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IToylangVisitor<TResult> typedVisitor = visitor as IToylangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtExpressionContext stmtExpression() {
		StmtExpressionContext _localctx = new StmtExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_stmtExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; binaryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FunctionArgumentsContext functionArguments() {
			return GetRuleContext<FunctionArgumentsContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IToylangVisitor<TResult> typedVisitor = visitor as IToylangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 28, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131; identifier();
			State = 132; Match(T__2);
			State = 133; functionArguments();
			State = 134; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgumentsContext : ParserRuleContext {
		public StmtExpressionContext[] stmtExpression() {
			return GetRuleContexts<StmtExpressionContext>();
		}
		public StmtExpressionContext stmtExpression(int i) {
			return GetRuleContext<StmtExpressionContext>(i);
		}
		public FunctionArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.EnterFunctionArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.ExitFunctionArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IToylangVisitor<TResult> typedVisitor = visitor as IToylangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgumentsContext functionArguments() {
		FunctionArgumentsContext _localctx = new FunctionArgumentsContext(Context, State);
		EnterRule(_localctx, 30, RULE_functionArguments);
		int _la;
		try {
			State = 145;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case IDENTIFIER:
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 136; stmtExpression();
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 137; Match(T__5);
					State = 138; stmtExpression();
					}
					}
					State = 143;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryExpressionContext : ParserRuleContext {
		public LogicalExpressionContext logicalExpression() {
			return GetRuleContext<LogicalExpressionContext>(0);
		}
		public BinaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.EnterBinaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.ExitBinaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IToylangVisitor<TResult> typedVisitor = visitor as IToylangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryExpressionContext binaryExpression() {
		BinaryExpressionContext _localctx = new BinaryExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_binaryExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; logicalExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalExpressionContext : ParserRuleContext {
		public EqExpressionContext[] eqExpression() {
			return GetRuleContexts<EqExpressionContext>();
		}
		public EqExpressionContext eqExpression(int i) {
			return GetRuleContext<EqExpressionContext>(i);
		}
		public ITerminalNode[] OP_LOGICAL() { return GetTokens(ToylangParser.OP_LOGICAL); }
		public ITerminalNode OP_LOGICAL(int i) {
			return GetToken(ToylangParser.OP_LOGICAL, i);
		}
		public LogicalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.EnterLogicalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.ExitLogicalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IToylangVisitor<TResult> typedVisitor = visitor as IToylangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalExpressionContext logicalExpression() {
		LogicalExpressionContext _localctx = new LogicalExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_logicalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149; eqExpression();
			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_LOGICAL) {
				{
				{
				State = 150; Match(OP_LOGICAL);
				State = 151; eqExpression();
				}
				}
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqExpressionContext : ParserRuleContext {
		public CompareExpressionContext[] compareExpression() {
			return GetRuleContexts<CompareExpressionContext>();
		}
		public CompareExpressionContext compareExpression(int i) {
			return GetRuleContext<CompareExpressionContext>(i);
		}
		public ITerminalNode[] OP_EQ() { return GetTokens(ToylangParser.OP_EQ); }
		public ITerminalNode OP_EQ(int i) {
			return GetToken(ToylangParser.OP_EQ, i);
		}
		public EqExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eqExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.EnterEqExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.ExitEqExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IToylangVisitor<TResult> typedVisitor = visitor as IToylangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqExpressionContext eqExpression() {
		EqExpressionContext _localctx = new EqExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_eqExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; compareExpression();
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_EQ) {
				{
				{
				State = 158; Match(OP_EQ);
				State = 159; compareExpression();
				}
				}
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareExpressionContext : ParserRuleContext {
		public AdditionExpressionContext[] additionExpression() {
			return GetRuleContexts<AdditionExpressionContext>();
		}
		public AdditionExpressionContext additionExpression(int i) {
			return GetRuleContext<AdditionExpressionContext>(i);
		}
		public ITerminalNode[] OP_COMPARE() { return GetTokens(ToylangParser.OP_COMPARE); }
		public ITerminalNode OP_COMPARE(int i) {
			return GetToken(ToylangParser.OP_COMPARE, i);
		}
		public CompareExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.EnterCompareExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.ExitCompareExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IToylangVisitor<TResult> typedVisitor = visitor as IToylangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareExpressionContext compareExpression() {
		CompareExpressionContext _localctx = new CompareExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_compareExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; additionExpression();
			State = 170;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_COMPARE) {
				{
				{
				State = 166; Match(OP_COMPARE);
				State = 167; additionExpression();
				}
				}
				State = 172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionExpressionContext : ParserRuleContext {
		public MultiplyExpressionContext[] multiplyExpression() {
			return GetRuleContexts<MultiplyExpressionContext>();
		}
		public MultiplyExpressionContext multiplyExpression(int i) {
			return GetRuleContext<MultiplyExpressionContext>(i);
		}
		public ITerminalNode[] OP_ADDITIONAL() { return GetTokens(ToylangParser.OP_ADDITIONAL); }
		public ITerminalNode OP_ADDITIONAL(int i) {
			return GetToken(ToylangParser.OP_ADDITIONAL, i);
		}
		public AdditionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additionExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.EnterAdditionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.ExitAdditionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IToylangVisitor<TResult> typedVisitor = visitor as IToylangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditionExpressionContext additionExpression() {
		AdditionExpressionContext _localctx = new AdditionExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_additionExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; multiplyExpression();
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_ADDITIONAL) {
				{
				{
				State = 174; Match(OP_ADDITIONAL);
				State = 175; multiplyExpression();
				}
				}
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplyExpressionContext : ParserRuleContext {
		public AtomExpressionContext[] atomExpression() {
			return GetRuleContexts<AtomExpressionContext>();
		}
		public AtomExpressionContext atomExpression(int i) {
			return GetRuleContext<AtomExpressionContext>(i);
		}
		public ITerminalNode[] OP_MULTIPLY() { return GetTokens(ToylangParser.OP_MULTIPLY); }
		public ITerminalNode OP_MULTIPLY(int i) {
			return GetToken(ToylangParser.OP_MULTIPLY, i);
		}
		public MultiplyExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplyExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.EnterMultiplyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.ExitMultiplyExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IToylangVisitor<TResult> typedVisitor = visitor as IToylangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyExpressionContext multiplyExpression() {
		MultiplyExpressionContext _localctx = new MultiplyExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_multiplyExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181; atomExpression();
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_MULTIPLY) {
				{
				{
				State = 182; Match(OP_MULTIPLY);
				State = 183; atomExpression();
				}
				}
				State = 188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomExpressionContext : ParserRuleContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IntegralLiteralContext integralLiteral() {
			return GetRuleContext<IntegralLiteralContext>(0);
		}
		public StmtExpressionContext stmtExpression() {
			return GetRuleContext<StmtExpressionContext>(0);
		}
		public AtomExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.EnterAtomExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.ExitAtomExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IToylangVisitor<TResult> typedVisitor = visitor as IToylangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomExpressionContext atomExpression() {
		AtomExpressionContext _localctx = new AtomExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_atomExpression);
		try {
			State = 196;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 189; functionCall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 190; identifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 191; integralLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 192; Match(T__2);
				State = 193; stmtExpression();
				State = 194; Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(ToylangParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IToylangVisitor<TResult> typedVisitor = visitor as IToylangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 46, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegralLiteralContext : ParserRuleContext {
		public ITerminalNode INTEGER_LITERAL() { return GetToken(ToylangParser.INTEGER_LITERAL, 0); }
		public IntegralLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integralLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.EnterIntegralLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IToylangListener typedListener = listener as IToylangListener;
			if (typedListener != null) typedListener.ExitIntegralLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IToylangVisitor<TResult> typedVisitor = visitor as IToylangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegralLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegralLiteralContext integralLiteral() {
		IntegralLiteralContext _localctx = new IntegralLiteralContext(Context, State);
		EnterRule(_localctx, 48, RULE_integralLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; Match(INTEGER_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x18', '\xCD', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\x39', 
		'\n', '\x2', '\x3', '\x3', '\x6', '\x3', '<', '\n', '\x3', '\r', '\x3', 
		'\xE', '\x3', '=', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x46', '\n', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'P', '\n', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x5', '\b', '_', '\n', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\a', '\t', '\x64', '\n', '\t', '\f', '\t', '\xE', '\t', 
		'g', '\v', '\t', '\x3', '\t', '\x5', '\t', 'j', '\n', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '{', '\n', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\a', '\x11', '\x8E', '\n', '\x11', '\f', '\x11', '\xE', 
		'\x11', '\x91', '\v', '\x11', '\x3', '\x11', '\x5', '\x11', '\x94', '\n', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\a', '\x13', '\x9B', '\n', '\x13', '\f', '\x13', '\xE', '\x13', 
		'\x9E', '\v', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', 
		'\x14', '\xA3', '\n', '\x14', '\f', '\x14', '\xE', '\x14', '\xA6', '\v', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\xAB', 
		'\n', '\x15', '\f', '\x15', '\xE', '\x15', '\xAE', '\v', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\xB3', '\n', '\x16', 
		'\f', '\x16', '\xE', '\x16', '\xB6', '\v', '\x16', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\a', '\x17', '\xBB', '\n', '\x17', '\f', '\x17', 
		'\xE', '\x17', '\xBE', '\v', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', 
		'\x18', '\xC7', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x2', '\x2', '\x1B', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', 
		'\x2', '\x2', '\x2', '\xCB', '\x2', '\x38', '\x3', '\x2', '\x2', '\x2', 
		'\x4', ';', '\x3', '\x2', '\x2', '\x2', '\x6', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\b', 'O', '\x3', '\x2', '\x2', '\x2', '\n', 'Q', '\x3', '\x2', 
		'\x2', '\x2', '\f', 'S', '\x3', '\x2', '\x2', '\x2', '\xE', 'Z', '\x3', 
		'\x2', '\x2', '\x2', '\x10', 'i', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'k', '\x3', '\x2', '\x2', '\x2', '\x14', 'm', '\x3', '\x2', '\x2', '\x2', 
		'\x16', 's', '\x3', '\x2', '\x2', '\x2', '\x18', '|', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x80', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x85', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\"', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '$', '\x97', '\x3', '\x2', '\x2', '\x2', '&', '\x9F', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xA7', '\x3', '\x2', '\x2', '\x2', '*', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', ',', '\xB7', '\x3', '\x2', '\x2', '\x2', '.', '\xC6', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\xC8', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\xCA', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x5', '\x4', 
		'\x3', '\x2', '\x35', '\x36', '\a', '\x2', '\x2', '\x3', '\x36', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x37', '\x39', '\a', '\x2', '\x2', '\x3', 
		'\x38', '\x34', '\x3', '\x2', '\x2', '\x2', '\x38', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x39', '\x3', '\x3', '\x2', '\x2', '\x2', ':', '<', '\x5', 
		'\b', '\x5', '\x2', ';', ':', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', 
		'\x2', '\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', 
		'\x2', '\x2', '\x2', '>', '\x5', '\x3', '\x2', '\x2', '\x2', '?', '@', 
		'\a', '\x3', '\x2', '\x2', '@', '\x41', '\x5', '\x4', '\x3', '\x2', '\x41', 
		'\x42', '\a', '\x4', '\x2', '\x2', '\x42', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '\x44', '\a', '\x3', '\x2', '\x2', '\x44', '\x46', '\a', 
		'\x4', '\x2', '\x2', '\x45', '?', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x46', '\a', '\x3', '\x2', '\x2', 
		'\x2', 'G', 'P', '\x5', '\f', '\a', '\x2', 'H', 'P', '\x5', '\xE', '\b', 
		'\x2', 'I', 'P', '\x5', '\x1C', '\xF', '\x2', 'J', 'P', '\x5', '\x14', 
		'\v', '\x2', 'K', 'P', '\x5', '\x16', '\f', '\x2', 'L', 'P', '\x5', '\x18', 
		'\r', '\x2', 'M', 'P', '\x5', '\x1A', '\xE', '\x2', 'N', 'P', '\x5', '\n', 
		'\x6', '\x2', 'O', 'G', '\x3', '\x2', '\x2', '\x2', 'O', 'H', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'I', '\x3', '\x2', '\x2', '\x2', 'O', 'J', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'K', '\x3', '\x2', '\x2', '\x2', 'O', 'L', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 'N', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\t', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\a', '\x16', 
		'\x2', '\x2', 'R', '\v', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\a', '\f', 
		'\x2', '\x2', 'T', 'U', '\x5', '\x30', '\x19', '\x2', 'U', 'V', '\a', 
		'\x5', '\x2', '\x2', 'V', 'W', '\x5', '\x10', '\t', '\x2', 'W', 'X', '\a', 
		'\x6', '\x2', '\x2', 'X', 'Y', '\x5', '\x6', '\x4', '\x2', 'Y', '\r', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '[', '\a', '\r', '\x2', '\x2', '[', '^', 
		'\x5', '\x30', '\x19', '\x2', '\\', ']', '\a', '\a', '\x2', '\x2', ']', 
		'_', '\x5', '\x1C', '\xF', '\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', 
		'^', '_', '\x3', '\x2', '\x2', '\x2', '_', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '`', '\x65', '\x5', '\x12', '\n', '\x2', '\x61', '\x62', '\a', 
		'\b', '\x2', '\x2', '\x62', '\x64', '\x5', '\x12', '\n', '\x2', '\x63', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x64', 'g', '\x3', '\x2', '\x2', 
		'\x2', '\x65', '\x63', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\x3', 
		'\x2', '\x2', '\x2', '\x66', 'j', '\x3', '\x2', '\x2', '\x2', 'g', '\x65', 
		'\x3', '\x2', '\x2', '\x2', 'h', 'j', '\x3', '\x2', '\x2', '\x2', 'i', 
		'`', '\x3', '\x2', '\x2', '\x2', 'i', 'h', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x11', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x5', '\x30', '\x19', 
		'\x2', 'l', '\x13', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\a', '\xE', 
		'\x2', '\x2', 'n', 'o', '\a', '\x5', '\x2', '\x2', 'o', 'p', '\x5', '\x1C', 
		'\xF', '\x2', 'p', 'q', '\a', '\x6', '\x2', '\x2', 'q', 'r', '\x5', '\x6', 
		'\x4', '\x2', 'r', '\x15', '\x3', '\x2', '\x2', '\x2', 's', 't', '\a', 
		'\v', '\x2', '\x2', 't', 'u', '\a', '\x5', '\x2', '\x2', 'u', 'v', '\x5', 
		'\x1C', '\xF', '\x2', 'v', 'w', '\a', '\x6', '\x2', '\x2', 'w', 'z', '\x5', 
		'\x6', '\x4', '\x2', 'x', 'y', '\a', '\n', '\x2', '\x2', 'y', '{', '\x5', 
		'\x6', '\x4', '\x2', 'z', 'x', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\x3', 
		'\x2', '\x2', '\x2', '{', '\x17', '\x3', '\x2', '\x2', '\x2', '|', '}', 
		'\x5', '\x30', '\x19', '\x2', '}', '~', '\a', '\a', '\x2', '\x2', '~', 
		'\x7F', '\x5', '\x1C', '\xF', '\x2', '\x7F', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '\x81', '\a', '\t', '\x2', '\x2', '\x81', '\x82', '\x5', 
		'\x1C', '\xF', '\x2', '\x82', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'\x84', '\x5', '\"', '\x12', '\x2', '\x84', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\x86', '\x5', '\x30', '\x19', '\x2', '\x86', '\x87', '\a', 
		'\x5', '\x2', '\x2', '\x87', '\x88', '\x5', ' ', '\x11', '\x2', '\x88', 
		'\x89', '\a', '\x6', '\x2', '\x2', '\x89', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x8F', '\x5', '\x1C', '\xF', '\x2', '\x8B', '\x8C', '\a', 
		'\b', '\x2', '\x2', '\x8C', '\x8E', '\x5', '\x1C', '\xF', '\x2', '\x8D', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\x94', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x92', '\x94', '\x3', '\x2', '\x2', 
		'\x2', '\x93', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x93', '\x92', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '!', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x96', '\x5', '$', '\x13', '\x2', '\x96', '#', '\x3', '\x2', '\x2', '\x2', 
		'\x97', '\x9C', '\x5', '&', '\x14', '\x2', '\x98', '\x99', '\a', '\xF', 
		'\x2', '\x2', '\x99', '\x9B', '\x5', '&', '\x14', '\x2', '\x9A', '\x98', 
		'\x3', '\x2', '\x2', '\x2', '\x9B', '\x9E', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\x3', '\x2', 
		'\x2', '\x2', '\x9D', '%', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9C', 
		'\x3', '\x2', '\x2', '\x2', '\x9F', '\xA4', '\x5', '(', '\x15', '\x2', 
		'\xA0', '\xA1', '\a', '\x10', '\x2', '\x2', '\xA1', '\xA3', '\x5', '(', 
		'\x15', '\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA6', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\xA2', '\x3', '\x2', '\x2', '\x2', 
		'\xA4', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA5', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xAC', 
		'\x5', '*', '\x16', '\x2', '\xA8', '\xA9', '\a', '\x12', '\x2', '\x2', 
		'\xA9', '\xAB', '\x5', '*', '\x16', '\x2', '\xAA', '\xA8', '\x3', '\x2', 
		'\x2', '\x2', '\xAB', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAA', 
		'\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\x3', '\x2', '\x2', '\x2', 
		'\xAD', ')', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAC', '\x3', '\x2', 
		'\x2', '\x2', '\xAF', '\xB4', '\x5', ',', '\x17', '\x2', '\xB0', '\xB1', 
		'\a', '\x11', '\x2', '\x2', '\xB1', '\xB3', '\x5', ',', '\x17', '\x2', 
		'\xB2', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB6', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', 
		'\x3', '\x2', '\x2', '\x2', '\xB5', '+', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB4', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xBC', '\x5', '.', '\x18', 
		'\x2', '\xB8', '\xB9', '\a', '\x13', '\x2', '\x2', '\xB9', '\xBB', '\x5', 
		'.', '\x18', '\x2', '\xBA', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xBB', 
		'\xBE', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBA', '\x3', '\x2', '\x2', 
		'\x2', '\xBC', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBD', '-', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xC7', '\x5', '\x1E', '\x10', '\x2', '\xC0', '\xC7', '\x5', '\x30', '\x19', 
		'\x2', '\xC1', '\xC7', '\x5', '\x32', '\x1A', '\x2', '\xC2', '\xC3', '\a', 
		'\x5', '\x2', '\x2', '\xC3', '\xC4', '\x5', '\x1C', '\xF', '\x2', '\xC4', 
		'\xC5', '\a', '\x6', '\x2', '\x2', '\xC5', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\xC6', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC0', '\x3', 
		'\x2', '\x2', '\x2', '\xC6', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC6', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '\xC7', '/', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\xC9', '\a', '\x14', '\x2', '\x2', '\xC9', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\xCA', '\xCB', '\a', '\x15', '\x2', '\x2', '\xCB', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x12', '\x38', '=', '\x45', 'O', 
		'^', '\x65', 'i', 'z', '\x8F', '\x93', '\x9C', '\xA4', '\xAC', '\xB4', 
		'\xBC', '\xC6',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
