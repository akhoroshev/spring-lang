//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/akhoroshev/Documents/spring-lang/Spring/src/Spring/src/grammar/Solidity.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class SolidityParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, T__89=90, T__90=91, T__91=92, Int=93, Uint=94, Byte=95, 
		Fixed=96, Ufixed=97, BooleanLiteral=98, DecimalNumber=99, HexNumber=100, 
		NumberUnit=101, HexLiteralFragment=102, ReservedKeyword=103, AnonymousKeyword=104, 
		BreakKeyword=105, ConstantKeyword=106, ImmutableKeyword=107, ContinueKeyword=108, 
		LeaveKeyword=109, ExternalKeyword=110, IndexedKeyword=111, InternalKeyword=112, 
		PayableKeyword=113, PrivateKeyword=114, PublicKeyword=115, VirtualKeyword=116, 
		PureKeyword=117, TypeKeyword=118, ViewKeyword=119, ConstructorKeyword=120, 
		FallbackKeyword=121, ReceiveKeyword=122, Identifier=123, StringLiteralFragment=124, 
		VersionLiteral=125, WS=126, COMMENT=127, LINE_COMMENT=128;
	public const int
		RULE_sourceUnit = 0, RULE_pragmaDirective = 1, RULE_pragmaName = 2, RULE_pragmaValue = 3, 
		RULE_version = 4, RULE_versionConstraint = 5, RULE_versionOperator = 6, 
		RULE_importDirective = 7, RULE_importDeclaration = 8, RULE_contractDefinition = 9, 
		RULE_inheritanceSpecifier = 10, RULE_contractPart = 11, RULE_stateVariableDeclaration = 12, 
		RULE_overrideSpecifier = 13, RULE_usingForDeclaration = 14, RULE_structDefinition = 15, 
		RULE_modifierDefinition = 16, RULE_functionDefinition = 17, RULE_functionDescriptor = 18, 
		RULE_returnParameters = 19, RULE_modifierList = 20, RULE_modifierInvocation = 21, 
		RULE_eventDefinition = 22, RULE_enumDefinition = 23, RULE_enumValue = 24, 
		RULE_parameterList = 25, RULE_parameter = 26, RULE_eventParameterList = 27, 
		RULE_eventParameter = 28, RULE_variableDeclaration = 29, RULE_typeName = 30, 
		RULE_userDefinedTypeName = 31, RULE_mapping = 32, RULE_functionTypeName = 33, 
		RULE_storageLocation = 34, RULE_stateMutability = 35, RULE_block = 36, 
		RULE_statement = 37, RULE_expressionStatement = 38, RULE_ifStatement = 39, 
		RULE_tryStatement = 40, RULE_catchClause = 41, RULE_whileStatement = 42, 
		RULE_forStatement = 43, RULE_simpleStatement = 44, RULE_inlineAssemblyStatement = 45, 
		RULE_doWhileStatement = 46, RULE_continueStatement = 47, RULE_breakStatement = 48, 
		RULE_returnStatement = 49, RULE_throwStatement = 50, RULE_emitStatement = 51, 
		RULE_variableDeclarationStatement = 52, RULE_variableDeclarationList = 53, 
		RULE_identifierList = 54, RULE_elementaryTypeName = 55, RULE_expression = 56, 
		RULE_primaryExpression = 57, RULE_expressionList = 58, RULE_nameValueList = 59, 
		RULE_nameValue = 60, RULE_functionCallArguments = 61, RULE_functionCall = 62, 
		RULE_tupleExpression = 63, RULE_typeNameExpression = 64, RULE_assemblyItem = 65, 
		RULE_assemblyBlock = 66, RULE_assemblyExpression = 67, RULE_assemblyCall = 68, 
		RULE_assemblyLocalDefinition = 69, RULE_assemblyAssignment = 70, RULE_assemblyIdentifierList = 71, 
		RULE_assemblyStackAssignment = 72, RULE_labelDefinition = 73, RULE_assemblySwitch = 74, 
		RULE_assemblyCase = 75, RULE_assemblyFunctionDefinition = 76, RULE_assemblyFunctionReturns = 77, 
		RULE_assemblyFor = 78, RULE_assemblyIf = 79, RULE_assemblyLiteral = 80, 
		RULE_assemblyTypedVariableList = 81, RULE_assemblyType = 82, RULE_subAssembly = 83, 
		RULE_numberLiteral = 84, RULE_identifier = 85, RULE_hexLiteral = 86, RULE_stringLiteral = 87;
	public static readonly string[] ruleNames = {
		"sourceUnit", "pragmaDirective", "pragmaName", "pragmaValue", "version", 
		"versionConstraint", "versionOperator", "importDirective", "importDeclaration", 
		"contractDefinition", "inheritanceSpecifier", "contractPart", "stateVariableDeclaration", 
		"overrideSpecifier", "usingForDeclaration", "structDefinition", "modifierDefinition", 
		"functionDefinition", "functionDescriptor", "returnParameters", "modifierList", 
		"modifierInvocation", "eventDefinition", "enumDefinition", "enumValue", 
		"parameterList", "parameter", "eventParameterList", "eventParameter", 
		"variableDeclaration", "typeName", "userDefinedTypeName", "mapping", "functionTypeName", 
		"storageLocation", "stateMutability", "block", "statement", "expressionStatement", 
		"ifStatement", "tryStatement", "catchClause", "whileStatement", "forStatement", 
		"simpleStatement", "inlineAssemblyStatement", "doWhileStatement", "continueStatement", 
		"breakStatement", "returnStatement", "throwStatement", "emitStatement", 
		"variableDeclarationStatement", "variableDeclarationList", "identifierList", 
		"elementaryTypeName", "expression", "primaryExpression", "expressionList", 
		"nameValueList", "nameValue", "functionCallArguments", "functionCall", 
		"tupleExpression", "typeNameExpression", "assemblyItem", "assemblyBlock", 
		"assemblyExpression", "assemblyCall", "assemblyLocalDefinition", "assemblyAssignment", 
		"assemblyIdentifierList", "assemblyStackAssignment", "labelDefinition", 
		"assemblySwitch", "assemblyCase", "assemblyFunctionDefinition", "assemblyFunctionReturns", 
		"assemblyFor", "assemblyIf", "assemblyLiteral", "assemblyTypedVariableList", 
		"assemblyType", "subAssembly", "numberLiteral", "identifier", "hexLiteral", 
		"stringLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'pragma'", "';'", "'^'", "'~'", "'>='", "'>'", "'<'", "'<='", "'='", 
		"'import'", "'as'", "'*'", "'from'", "'{'", "','", "'}'", "'abstract'", 
		"'contract'", "'interface'", "'library'", "'is'", "'('", "')'", "'override'", 
		"'using'", "'for'", "'struct'", "'modifier'", "'function'", "'returns'", 
		"'event'", "'enum'", "'['", "']'", "'.'", "'mapping'", "'=>'", "'memory'", 
		"'storage'", "'calldata'", "'if'", "'else'", "'try'", "'catch'", "'while'", 
		"'assembly'", "'do'", "'return'", "'throw'", "'emit'", "'var'", "'address'", 
		"'bool'", "'string'", "'byte'", "'++'", "'--'", "'new'", "':'", "'+'", 
		"'-'", "'after'", "'delete'", "'!'", "'**'", "'/'", "'%'", "'<<'", "'>>'", 
		"'&'", "'|'", "'=='", "'!='", "'&&'", "'||'", "'?'", "'|='", "'^='", "'&='", 
		"'<<='", "'>>='", "'+='", "'-='", "'*='", "'/='", "'%='", "'let'", "':='", 
		"'=:'", "'switch'", "'case'", "'default'", null, null, null, null, null, 
		null, null, null, null, null, null, "'anonymous'", "'break'", "'constant'", 
		"'immutable'", "'continue'", "'leave'", "'external'", "'indexed'", "'internal'", 
		"'payable'", "'private'", "'public'", "'virtual'", "'pure'", "'type'", 
		"'view'", "'constructor'", "'fallback'", "'receive'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "Int", "Uint", "Byte", 
		"Fixed", "Ufixed", "BooleanLiteral", "DecimalNumber", "HexNumber", "NumberUnit", 
		"HexLiteralFragment", "ReservedKeyword", "AnonymousKeyword", "BreakKeyword", 
		"ConstantKeyword", "ImmutableKeyword", "ContinueKeyword", "LeaveKeyword", 
		"ExternalKeyword", "IndexedKeyword", "InternalKeyword", "PayableKeyword", 
		"PrivateKeyword", "PublicKeyword", "VirtualKeyword", "PureKeyword", "TypeKeyword", 
		"ViewKeyword", "ConstructorKeyword", "FallbackKeyword", "ReceiveKeyword", 
		"Identifier", "StringLiteralFragment", "VersionLiteral", "WS", "COMMENT", 
		"LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Solidity.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SolidityParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SolidityParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SolidityParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SourceUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(SolidityParser.Eof, 0); }
		public PragmaDirectiveContext[] pragmaDirective() {
			return GetRuleContexts<PragmaDirectiveContext>();
		}
		public PragmaDirectiveContext pragmaDirective(int i) {
			return GetRuleContext<PragmaDirectiveContext>(i);
		}
		public ImportDirectiveContext[] importDirective() {
			return GetRuleContexts<ImportDirectiveContext>();
		}
		public ImportDirectiveContext importDirective(int i) {
			return GetRuleContext<ImportDirectiveContext>(i);
		}
		public StructDefinitionContext[] structDefinition() {
			return GetRuleContexts<StructDefinitionContext>();
		}
		public StructDefinitionContext structDefinition(int i) {
			return GetRuleContext<StructDefinitionContext>(i);
		}
		public EnumDefinitionContext[] enumDefinition() {
			return GetRuleContexts<EnumDefinitionContext>();
		}
		public EnumDefinitionContext enumDefinition(int i) {
			return GetRuleContext<EnumDefinitionContext>(i);
		}
		public ContractDefinitionContext[] contractDefinition() {
			return GetRuleContexts<ContractDefinitionContext>();
		}
		public ContractDefinitionContext contractDefinition(int i) {
			return GetRuleContext<ContractDefinitionContext>(i);
		}
		public SourceUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterSourceUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitSourceUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceUnitContext sourceUnit() {
		SourceUnitContext _localctx = new SourceUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_sourceUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__9) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__26) | (1L << T__31))) != 0)) {
				{
				State = 181;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__0:
					{
					State = 176; pragmaDirective();
					}
					break;
				case T__9:
					{
					State = 177; importDirective();
					}
					break;
				case T__26:
					{
					State = 178; structDefinition();
					}
					break;
				case T__31:
					{
					State = 179; enumDefinition();
					}
					break;
				case T__16:
				case T__17:
				case T__18:
				case T__19:
					{
					State = 180; contractDefinition();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 186; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaDirectiveContext : ParserRuleContext {
		public PragmaNameContext pragmaName() {
			return GetRuleContext<PragmaNameContext>(0);
		}
		public PragmaValueContext pragmaValue() {
			return GetRuleContext<PragmaValueContext>(0);
		}
		public PragmaDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragmaDirective; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterPragmaDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitPragmaDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragmaDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PragmaDirectiveContext pragmaDirective() {
		PragmaDirectiveContext _localctx = new PragmaDirectiveContext(Context, State);
		EnterRule(_localctx, 2, RULE_pragmaDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188; Match(T__0);
			State = 189; pragmaName();
			State = 190; pragmaValue();
			State = 191; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PragmaNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragmaName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterPragmaName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitPragmaName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragmaName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PragmaNameContext pragmaName() {
		PragmaNameContext _localctx = new PragmaNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_pragmaName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaValueContext : ParserRuleContext {
		public VersionContext version() {
			return GetRuleContext<VersionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PragmaValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragmaValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterPragmaValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitPragmaValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragmaValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PragmaValueContext pragmaValue() {
		PragmaValueContext _localctx = new PragmaValueContext(Context, State);
		EnterRule(_localctx, 6, RULE_pragmaValue);
		try {
			State = 197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 195; version();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 196; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionContext : ParserRuleContext {
		public VersionConstraintContext[] versionConstraint() {
			return GetRuleContexts<VersionConstraintContext>();
		}
		public VersionConstraintContext versionConstraint(int i) {
			return GetRuleContext<VersionConstraintContext>(i);
		}
		public VersionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_version; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVersion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVersion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVersion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VersionContext version() {
		VersionContext _localctx = new VersionContext(Context, State);
		EnterRule(_localctx, 8, RULE_version);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199; versionConstraint();
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8))) != 0) || _la==VersionLiteral) {
				{
				State = 200; versionConstraint();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionConstraintContext : ParserRuleContext {
		public ITerminalNode VersionLiteral() { return GetToken(SolidityParser.VersionLiteral, 0); }
		public VersionOperatorContext versionOperator() {
			return GetRuleContext<VersionOperatorContext>(0);
		}
		public VersionConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_versionConstraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVersionConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVersionConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVersionConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VersionConstraintContext versionConstraint() {
		VersionConstraintContext _localctx = new VersionConstraintContext(Context, State);
		EnterRule(_localctx, 10, RULE_versionConstraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8))) != 0)) {
				{
				State = 203; versionOperator();
				}
			}

			State = 206; Match(VersionLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionOperatorContext : ParserRuleContext {
		public VersionOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_versionOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVersionOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVersionOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVersionOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VersionOperatorContext versionOperator() {
		VersionOperatorContext _localctx = new VersionOperatorContext(Context, State);
		EnterRule(_localctx, 12, RULE_versionOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDirectiveContext : ParserRuleContext {
		public ITerminalNode StringLiteralFragment() { return GetToken(SolidityParser.StringLiteralFragment, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ImportDeclarationContext[] importDeclaration() {
			return GetRuleContexts<ImportDeclarationContext>();
		}
		public ImportDeclarationContext importDeclaration(int i) {
			return GetRuleContext<ImportDeclarationContext>(i);
		}
		public ImportDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDirective; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterImportDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitImportDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDirectiveContext importDirective() {
		ImportDirectiveContext _localctx = new ImportDirectiveContext(Context, State);
		EnterRule(_localctx, 14, RULE_importDirective);
		int _la;
		try {
			State = 244;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 210; Match(T__9);
				State = 211; Match(StringLiteralFragment);
				State = 214;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__10) {
					{
					State = 212; Match(T__10);
					State = 213; identifier();
					}
				}

				State = 216; Match(T__1);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 217; Match(T__9);
				State = 220;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__11:
					{
					State = 218; Match(T__11);
					}
					break;
				case T__12:
				case T__39:
				case T__51:
				case Identifier:
					{
					State = 219; identifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__10) {
					{
					State = 222; Match(T__10);
					State = 223; identifier();
					}
				}

				State = 226; Match(T__12);
				State = 227; Match(StringLiteralFragment);
				State = 228; Match(T__1);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 229; Match(T__9);
				State = 230; Match(T__13);
				State = 231; importDeclaration();
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 232; Match(T__14);
					State = 233; importDeclaration();
					}
					}
					State = 238;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 239; Match(T__15);
				State = 240; Match(T__12);
				State = 241; Match(StringLiteralFragment);
				State = 242; Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDeclarationContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterImportDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitImportDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDeclarationContext importDeclaration() {
		ImportDeclarationContext _localctx = new ImportDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_importDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246; identifier();
			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 247; Match(T__10);
				State = 248; identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContractDefinitionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public InheritanceSpecifierContext[] inheritanceSpecifier() {
			return GetRuleContexts<InheritanceSpecifierContext>();
		}
		public InheritanceSpecifierContext inheritanceSpecifier(int i) {
			return GetRuleContext<InheritanceSpecifierContext>(i);
		}
		public ContractPartContext[] contractPart() {
			return GetRuleContexts<ContractPartContext>();
		}
		public ContractPartContext contractPart(int i) {
			return GetRuleContext<ContractPartContext>(i);
		}
		public ContractDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contractDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterContractDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitContractDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContractDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContractDefinitionContext contractDefinition() {
		ContractDefinitionContext _localctx = new ContractDefinitionContext(Context, State);
		EnterRule(_localctx, 18, RULE_contractDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 251; Match(T__16);
				}
			}

			State = 254;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__17) | (1L << T__18) | (1L << T__19))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 255; identifier();
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__20) {
				{
				State = 256; Match(T__20);
				State = 257; inheritanceSpecifier();
				State = 262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 258; Match(T__14);
					State = 259; inheritanceSpecifier();
					}
					}
					State = 264;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 267; Match(T__13);
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__24) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__30) | (1L << T__31) | (1L << T__35) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Int - 93)) | (1L << (Uint - 93)) | (1L << (Byte - 93)) | (1L << (Fixed - 93)) | (1L << (Ufixed - 93)) | (1L << (ConstructorKeyword - 93)) | (1L << (FallbackKeyword - 93)) | (1L << (ReceiveKeyword - 93)) | (1L << (Identifier - 93)))) != 0)) {
				{
				{
				State = 268; contractPart();
				}
				}
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 274; Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritanceSpecifierContext : ParserRuleContext {
		public UserDefinedTypeNameContext userDefinedTypeName() {
			return GetRuleContext<UserDefinedTypeNameContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public InheritanceSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inheritanceSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterInheritanceSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitInheritanceSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInheritanceSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InheritanceSpecifierContext inheritanceSpecifier() {
		InheritanceSpecifierContext _localctx = new InheritanceSpecifierContext(Context, State);
		EnterRule(_localctx, 20, RULE_inheritanceSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276; userDefinedTypeName();
			State = 282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__21) {
				{
				State = 277; Match(T__21);
				State = 279;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__21) | (1L << T__32) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (Int - 64)) | (1L << (Uint - 64)) | (1L << (Byte - 64)) | (1L << (Fixed - 64)) | (1L << (Ufixed - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (DecimalNumber - 64)) | (1L << (HexNumber - 64)) | (1L << (HexLiteralFragment - 64)) | (1L << (PayableKeyword - 64)) | (1L << (TypeKeyword - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteralFragment - 64)))) != 0)) {
					{
					State = 278; expressionList();
					}
				}

				State = 281; Match(T__22);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContractPartContext : ParserRuleContext {
		public StateVariableDeclarationContext stateVariableDeclaration() {
			return GetRuleContext<StateVariableDeclarationContext>(0);
		}
		public UsingForDeclarationContext usingForDeclaration() {
			return GetRuleContext<UsingForDeclarationContext>(0);
		}
		public StructDefinitionContext structDefinition() {
			return GetRuleContext<StructDefinitionContext>(0);
		}
		public ModifierDefinitionContext modifierDefinition() {
			return GetRuleContext<ModifierDefinitionContext>(0);
		}
		public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		public EventDefinitionContext eventDefinition() {
			return GetRuleContext<EventDefinitionContext>(0);
		}
		public EnumDefinitionContext enumDefinition() {
			return GetRuleContext<EnumDefinitionContext>(0);
		}
		public ContractPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contractPart; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterContractPart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitContractPart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContractPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContractPartContext contractPart() {
		ContractPartContext _localctx = new ContractPartContext(Context, State);
		EnterRule(_localctx, 22, RULE_contractPart);
		try {
			State = 291;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 284; stateVariableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 285; usingForDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 286; structDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 287; modifierDefinition();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 288; functionDefinition();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 289; eventDefinition();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 290; enumDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateVariableDeclarationContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode[] PublicKeyword() { return GetTokens(SolidityParser.PublicKeyword); }
		public ITerminalNode PublicKeyword(int i) {
			return GetToken(SolidityParser.PublicKeyword, i);
		}
		public ITerminalNode[] InternalKeyword() { return GetTokens(SolidityParser.InternalKeyword); }
		public ITerminalNode InternalKeyword(int i) {
			return GetToken(SolidityParser.InternalKeyword, i);
		}
		public ITerminalNode[] PrivateKeyword() { return GetTokens(SolidityParser.PrivateKeyword); }
		public ITerminalNode PrivateKeyword(int i) {
			return GetToken(SolidityParser.PrivateKeyword, i);
		}
		public ITerminalNode[] ConstantKeyword() { return GetTokens(SolidityParser.ConstantKeyword); }
		public ITerminalNode ConstantKeyword(int i) {
			return GetToken(SolidityParser.ConstantKeyword, i);
		}
		public ITerminalNode[] ImmutableKeyword() { return GetTokens(SolidityParser.ImmutableKeyword); }
		public ITerminalNode ImmutableKeyword(int i) {
			return GetToken(SolidityParser.ImmutableKeyword, i);
		}
		public OverrideSpecifierContext[] overrideSpecifier() {
			return GetRuleContexts<OverrideSpecifierContext>();
		}
		public OverrideSpecifierContext overrideSpecifier(int i) {
			return GetRuleContext<OverrideSpecifierContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StateVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStateVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStateVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateVariableDeclarationContext stateVariableDeclaration() {
		StateVariableDeclarationContext _localctx = new StateVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_stateVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293; typeName(0);
			State = 302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__23 || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (ConstantKeyword - 106)) | (1L << (ImmutableKeyword - 106)) | (1L << (InternalKeyword - 106)) | (1L << (PrivateKeyword - 106)) | (1L << (PublicKeyword - 106)))) != 0)) {
				{
				State = 300;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PublicKeyword:
					{
					State = 294; Match(PublicKeyword);
					}
					break;
				case InternalKeyword:
					{
					State = 295; Match(InternalKeyword);
					}
					break;
				case PrivateKeyword:
					{
					State = 296; Match(PrivateKeyword);
					}
					break;
				case ConstantKeyword:
					{
					State = 297; Match(ConstantKeyword);
					}
					break;
				case ImmutableKeyword:
					{
					State = 298; Match(ImmutableKeyword);
					}
					break;
				case T__23:
					{
					State = 299; overrideSpecifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 305; identifier();
			State = 308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 306; Match(T__8);
				State = 307; expression(0);
				}
			}

			State = 310; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverrideSpecifierContext : ParserRuleContext {
		public UserDefinedTypeNameContext[] userDefinedTypeName() {
			return GetRuleContexts<UserDefinedTypeNameContext>();
		}
		public UserDefinedTypeNameContext userDefinedTypeName(int i) {
			return GetRuleContext<UserDefinedTypeNameContext>(i);
		}
		public OverrideSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overrideSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterOverrideSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitOverrideSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverrideSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OverrideSpecifierContext overrideSpecifier() {
		OverrideSpecifierContext _localctx = new OverrideSpecifierContext(Context, State);
		EnterRule(_localctx, 26, RULE_overrideSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312; Match(T__23);
			State = 324;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 313; Match(T__21);
				State = 314; userDefinedTypeName();
				State = 319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 315; Match(T__14);
					State = 316; userDefinedTypeName();
					}
					}
					State = 321;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 322; Match(T__22);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingForDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public UsingForDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingForDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterUsingForDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitUsingForDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingForDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingForDeclarationContext usingForDeclaration() {
		UsingForDeclarationContext _localctx = new UsingForDeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_usingForDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326; Match(T__24);
			State = 327; identifier();
			State = 328; Match(T__25);
			State = 331;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				{
				State = 329; Match(T__11);
				}
				break;
			case T__12:
			case T__28:
			case T__35:
			case T__39:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
			case Identifier:
				{
				State = 330; typeName(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 333; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDefinitionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		public StructDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStructDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStructDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDefinitionContext structDefinition() {
		StructDefinitionContext _localctx = new StructDefinitionContext(Context, State);
		EnterRule(_localctx, 30, RULE_structDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335; Match(T__26);
			State = 336; identifier();
			State = 337; Match(T__13);
			State = 348;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__28) | (1L << T__35) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Int - 93)) | (1L << (Uint - 93)) | (1L << (Byte - 93)) | (1L << (Fixed - 93)) | (1L << (Ufixed - 93)) | (1L << (Identifier - 93)))) != 0)) {
				{
				State = 338; variableDeclaration();
				State = 339; Match(T__1);
				State = 345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__28) | (1L << T__35) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Int - 93)) | (1L << (Uint - 93)) | (1L << (Byte - 93)) | (1L << (Fixed - 93)) | (1L << (Ufixed - 93)) | (1L << (Identifier - 93)))) != 0)) {
					{
					{
					State = 340; variableDeclaration();
					State = 341; Match(T__1);
					}
					}
					State = 347;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 350; Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierDefinitionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ITerminalNode[] VirtualKeyword() { return GetTokens(SolidityParser.VirtualKeyword); }
		public ITerminalNode VirtualKeyword(int i) {
			return GetToken(SolidityParser.VirtualKeyword, i);
		}
		public OverrideSpecifierContext[] overrideSpecifier() {
			return GetRuleContexts<OverrideSpecifierContext>();
		}
		public OverrideSpecifierContext overrideSpecifier(int i) {
			return GetRuleContext<OverrideSpecifierContext>(i);
		}
		public ModifierDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifierDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterModifierDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitModifierDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifierDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierDefinitionContext modifierDefinition() {
		ModifierDefinitionContext _localctx = new ModifierDefinitionContext(Context, State);
		EnterRule(_localctx, 32, RULE_modifierDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352; Match(T__27);
			State = 353; identifier();
			State = 355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__21) {
				{
				State = 354; parameterList();
				}
			}

			State = 361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__23 || _la==VirtualKeyword) {
				{
				State = 359;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VirtualKeyword:
					{
					State = 357; Match(VirtualKeyword);
					}
					break;
				case T__23:
					{
					State = 358; overrideSpecifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 366;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				{
				State = 364; Match(T__1);
				}
				break;
			case T__13:
				{
				State = 365; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		public FunctionDescriptorContext functionDescriptor() {
			return GetRuleContext<FunctionDescriptorContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ModifierListContext modifierList() {
			return GetRuleContext<ModifierListContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ReturnParametersContext returnParameters() {
			return GetRuleContext<ReturnParametersContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 34, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368; functionDescriptor();
			State = 369; parameterList();
			State = 370; modifierList();
			State = 372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 371; returnParameters();
				}
			}

			State = 376;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				{
				State = 374; Match(T__1);
				}
				break;
			case T__13:
				{
				State = 375; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDescriptorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ReceiveKeyword() { return GetToken(SolidityParser.ReceiveKeyword, 0); }
		public ITerminalNode FallbackKeyword() { return GetToken(SolidityParser.FallbackKeyword, 0); }
		public ITerminalNode ConstructorKeyword() { return GetToken(SolidityParser.ConstructorKeyword, 0); }
		public FunctionDescriptorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDescriptor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionDescriptor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionDescriptor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDescriptor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDescriptorContext functionDescriptor() {
		FunctionDescriptorContext _localctx = new FunctionDescriptorContext(Context, State);
		EnterRule(_localctx, 36, RULE_functionDescriptor);
		try {
			State = 387;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__28:
				EnterOuterAlt(_localctx, 1);
				{
				State = 378; Match(T__28);
				State = 382;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__12:
				case T__39:
				case T__51:
				case Identifier:
					{
					State = 379; identifier();
					}
					break;
				case ReceiveKeyword:
					{
					State = 380; Match(ReceiveKeyword);
					}
					break;
				case FallbackKeyword:
					{
					State = 381; Match(FallbackKeyword);
					}
					break;
				case T__21:
					break;
				default:
					break;
				}
				}
				break;
			case ConstructorKeyword:
				EnterOuterAlt(_localctx, 2);
				{
				State = 384; Match(ConstructorKeyword);
				}
				break;
			case FallbackKeyword:
				EnterOuterAlt(_localctx, 3);
				{
				State = 385; Match(FallbackKeyword);
				}
				break;
			case ReceiveKeyword:
				EnterOuterAlt(_localctx, 4);
				{
				State = 386; Match(ReceiveKeyword);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnParametersContext : ParserRuleContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReturnParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterReturnParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitReturnParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnParametersContext returnParameters() {
		ReturnParametersContext _localctx = new ReturnParametersContext(Context, State);
		EnterRule(_localctx, 38, RULE_returnParameters);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389; Match(T__29);
			State = 390; parameterList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierListContext : ParserRuleContext {
		public ModifierInvocationContext[] modifierInvocation() {
			return GetRuleContexts<ModifierInvocationContext>();
		}
		public ModifierInvocationContext modifierInvocation(int i) {
			return GetRuleContext<ModifierInvocationContext>(i);
		}
		public StateMutabilityContext[] stateMutability() {
			return GetRuleContexts<StateMutabilityContext>();
		}
		public StateMutabilityContext stateMutability(int i) {
			return GetRuleContext<StateMutabilityContext>(i);
		}
		public ITerminalNode[] ExternalKeyword() { return GetTokens(SolidityParser.ExternalKeyword); }
		public ITerminalNode ExternalKeyword(int i) {
			return GetToken(SolidityParser.ExternalKeyword, i);
		}
		public ITerminalNode[] PublicKeyword() { return GetTokens(SolidityParser.PublicKeyword); }
		public ITerminalNode PublicKeyword(int i) {
			return GetToken(SolidityParser.PublicKeyword, i);
		}
		public ITerminalNode[] InternalKeyword() { return GetTokens(SolidityParser.InternalKeyword); }
		public ITerminalNode InternalKeyword(int i) {
			return GetToken(SolidityParser.InternalKeyword, i);
		}
		public ITerminalNode[] PrivateKeyword() { return GetTokens(SolidityParser.PrivateKeyword); }
		public ITerminalNode PrivateKeyword(int i) {
			return GetToken(SolidityParser.PrivateKeyword, i);
		}
		public ITerminalNode[] VirtualKeyword() { return GetTokens(SolidityParser.VirtualKeyword); }
		public ITerminalNode VirtualKeyword(int i) {
			return GetToken(SolidityParser.VirtualKeyword, i);
		}
		public OverrideSpecifierContext[] overrideSpecifier() {
			return GetRuleContexts<OverrideSpecifierContext>();
		}
		public OverrideSpecifierContext overrideSpecifier(int i) {
			return GetRuleContext<OverrideSpecifierContext>(i);
		}
		public ModifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterModifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitModifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierListContext modifierList() {
		ModifierListContext _localctx = new ModifierListContext(Context, State);
		EnterRule(_localctx, 40, RULE_modifierList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 400;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__12:
					case T__39:
					case T__51:
					case Identifier:
						{
						State = 392; modifierInvocation();
						}
						break;
					case ConstantKeyword:
					case PayableKeyword:
					case PureKeyword:
					case ViewKeyword:
						{
						State = 393; stateMutability();
						}
						break;
					case ExternalKeyword:
						{
						State = 394; Match(ExternalKeyword);
						}
						break;
					case PublicKeyword:
						{
						State = 395; Match(PublicKeyword);
						}
						break;
					case InternalKeyword:
						{
						State = 396; Match(InternalKeyword);
						}
						break;
					case PrivateKeyword:
						{
						State = 397; Match(PrivateKeyword);
						}
						break;
					case VirtualKeyword:
						{
						State = 398; Match(VirtualKeyword);
						}
						break;
					case T__23:
						{
						State = 399; overrideSpecifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 404;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierInvocationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ModifierInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifierInvocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterModifierInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitModifierInvocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifierInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierInvocationContext modifierInvocation() {
		ModifierInvocationContext _localctx = new ModifierInvocationContext(Context, State);
		EnterRule(_localctx, 42, RULE_modifierInvocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405; identifier();
			State = 411;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 406; Match(T__21);
				State = 408;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__21) | (1L << T__32) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (Int - 64)) | (1L << (Uint - 64)) | (1L << (Byte - 64)) | (1L << (Fixed - 64)) | (1L << (Ufixed - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (DecimalNumber - 64)) | (1L << (HexNumber - 64)) | (1L << (HexLiteralFragment - 64)) | (1L << (PayableKeyword - 64)) | (1L << (TypeKeyword - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteralFragment - 64)))) != 0)) {
					{
					State = 407; expressionList();
					}
				}

				State = 410; Match(T__22);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventDefinitionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EventParameterListContext eventParameterList() {
			return GetRuleContext<EventParameterListContext>(0);
		}
		public ITerminalNode AnonymousKeyword() { return GetToken(SolidityParser.AnonymousKeyword, 0); }
		public EventDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEventDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEventDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventDefinitionContext eventDefinition() {
		EventDefinitionContext _localctx = new EventDefinitionContext(Context, State);
		EnterRule(_localctx, 44, RULE_eventDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413; Match(T__30);
			State = 414; identifier();
			State = 415; eventParameterList();
			State = 417;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AnonymousKeyword) {
				{
				State = 416; Match(AnonymousKeyword);
				}
			}

			State = 419; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefinitionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EnumValueContext[] enumValue() {
			return GetRuleContexts<EnumValueContext>();
		}
		public EnumValueContext enumValue(int i) {
			return GetRuleContext<EnumValueContext>(i);
		}
		public EnumDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEnumDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEnumDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefinitionContext enumDefinition() {
		EnumDefinitionContext _localctx = new EnumDefinitionContext(Context, State);
		EnterRule(_localctx, 46, RULE_enumDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421; Match(T__31);
			State = 422; identifier();
			State = 423; Match(T__13);
			State = 425;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__39) | (1L << T__51))) != 0) || _la==Identifier) {
				{
				State = 424; enumValue();
				}
			}

			State = 431;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 427; Match(T__14);
				State = 428; enumValue();
				}
				}
				State = 433;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 434; Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEnumValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEnumValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 48, RULE_enumValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 50, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438; Match(T__21);
			State = 447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__28) | (1L << T__35) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Int - 93)) | (1L << (Uint - 93)) | (1L << (Byte - 93)) | (1L << (Fixed - 93)) | (1L << (Ufixed - 93)) | (1L << (Identifier - 93)))) != 0)) {
				{
				State = 439; parameter();
				State = 444;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 440; Match(T__14);
					State = 441; parameter();
					}
					}
					State = 446;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 449; Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public StorageLocationContext storageLocation() {
			return GetRuleContext<StorageLocationContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 52, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451; typeName(0);
			State = 453;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				State = 452; storageLocation();
				}
				break;
			}
			State = 456;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__39) | (1L << T__51))) != 0) || _la==Identifier) {
				{
				State = 455; identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventParameterListContext : ParserRuleContext {
		public EventParameterContext[] eventParameter() {
			return GetRuleContexts<EventParameterContext>();
		}
		public EventParameterContext eventParameter(int i) {
			return GetRuleContext<EventParameterContext>(i);
		}
		public EventParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEventParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEventParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventParameterListContext eventParameterList() {
		EventParameterListContext _localctx = new EventParameterListContext(Context, State);
		EnterRule(_localctx, 54, RULE_eventParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458; Match(T__21);
			State = 467;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__28) | (1L << T__35) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Int - 93)) | (1L << (Uint - 93)) | (1L << (Byte - 93)) | (1L << (Fixed - 93)) | (1L << (Ufixed - 93)) | (1L << (Identifier - 93)))) != 0)) {
				{
				State = 459; eventParameter();
				State = 464;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 460; Match(T__14);
					State = 461; eventParameter();
					}
					}
					State = 466;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 469; Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventParameterContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode IndexedKeyword() { return GetToken(SolidityParser.IndexedKeyword, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EventParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEventParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEventParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventParameterContext eventParameter() {
		EventParameterContext _localctx = new EventParameterContext(Context, State);
		EnterRule(_localctx, 56, RULE_eventParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471; typeName(0);
			State = 473;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IndexedKeyword) {
				{
				State = 472; Match(IndexedKeyword);
				}
			}

			State = 476;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__39) | (1L << T__51))) != 0) || _la==Identifier) {
				{
				State = 475; identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StorageLocationContext storageLocation() {
			return GetRuleContext<StorageLocationContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 58, RULE_variableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 478; typeName(0);
			State = 480;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 479; storageLocation();
				}
				break;
			}
			State = 482; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public ElementaryTypeNameContext elementaryTypeName() {
			return GetRuleContext<ElementaryTypeNameContext>(0);
		}
		public UserDefinedTypeNameContext userDefinedTypeName() {
			return GetRuleContext<UserDefinedTypeNameContext>(0);
		}
		public MappingContext mapping() {
			return GetRuleContext<MappingContext>(0);
		}
		public FunctionTypeNameContext functionTypeName() {
			return GetRuleContext<FunctionTypeNameContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		return typeName(0);
	}

	private TypeNameContext typeName(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeNameContext _localctx = new TypeNameContext(Context, _parentState);
		TypeNameContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_typeName, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 485; elementaryTypeName();
				}
				break;
			case 2:
				{
				State = 486; userDefinedTypeName();
				}
				break;
			case 3:
				{
				State = 487; mapping();
				}
				break;
			case 4:
				{
				State = 488; functionTypeName();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 499;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeNameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_typeName);
					State = 491;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 492; Match(T__32);
					State = 494;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__21) | (1L << T__32) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (Int - 64)) | (1L << (Uint - 64)) | (1L << (Byte - 64)) | (1L << (Fixed - 64)) | (1L << (Ufixed - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (DecimalNumber - 64)) | (1L << (HexNumber - 64)) | (1L << (HexLiteralFragment - 64)) | (1L << (PayableKeyword - 64)) | (1L << (TypeKeyword - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteralFragment - 64)))) != 0)) {
						{
						State = 493; expression(0);
						}
					}

					State = 496; Match(T__33);
					}
					} 
				}
				State = 501;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UserDefinedTypeNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public UserDefinedTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userDefinedTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterUserDefinedTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitUserDefinedTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserDefinedTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserDefinedTypeNameContext userDefinedTypeName() {
		UserDefinedTypeNameContext _localctx = new UserDefinedTypeNameContext(Context, State);
		EnterRule(_localctx, 62, RULE_userDefinedTypeName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 502; identifier();
			State = 507;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 503; Match(T__34);
					State = 504; identifier();
					}
					} 
				}
				State = 509;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MappingContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ElementaryTypeNameContext elementaryTypeName() {
			return GetRuleContext<ElementaryTypeNameContext>(0);
		}
		public UserDefinedTypeNameContext userDefinedTypeName() {
			return GetRuleContext<UserDefinedTypeNameContext>(0);
		}
		public MappingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapping; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterMapping(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitMapping(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapping(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MappingContext mapping() {
		MappingContext _localctx = new MappingContext(Context, State);
		EnterRule(_localctx, 64, RULE_mapping);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 510; Match(T__35);
			State = 511; Match(T__21);
			State = 514;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 512; elementaryTypeName();
				}
				break;
			case 2:
				{
				State = 513; userDefinedTypeName();
				}
				break;
			}
			State = 516; Match(T__36);
			State = 517; typeName(0);
			State = 518; Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeNameContext : ParserRuleContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ModifierListContext modifierList() {
			return GetRuleContext<ModifierListContext>(0);
		}
		public ReturnParametersContext returnParameters() {
			return GetRuleContext<ReturnParametersContext>(0);
		}
		public FunctionTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeNameContext functionTypeName() {
		FunctionTypeNameContext _localctx = new FunctionTypeNameContext(Context, State);
		EnterRule(_localctx, 66, RULE_functionTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 520; Match(T__28);
			State = 521; parameterList();
			State = 522; modifierList();
			State = 524;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 523; returnParameters();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorageLocationContext : ParserRuleContext {
		public StorageLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storageLocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStorageLocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStorageLocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorageLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StorageLocationContext storageLocation() {
		StorageLocationContext _localctx = new StorageLocationContext(Context, State);
		EnterRule(_localctx, 68, RULE_storageLocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 526;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__37) | (1L << T__38) | (1L << T__39))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateMutabilityContext : ParserRuleContext {
		public ITerminalNode PureKeyword() { return GetToken(SolidityParser.PureKeyword, 0); }
		public ITerminalNode ConstantKeyword() { return GetToken(SolidityParser.ConstantKeyword, 0); }
		public ITerminalNode ViewKeyword() { return GetToken(SolidityParser.ViewKeyword, 0); }
		public ITerminalNode PayableKeyword() { return GetToken(SolidityParser.PayableKeyword, 0); }
		public StateMutabilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateMutability; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStateMutability(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStateMutability(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStateMutability(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StateMutabilityContext stateMutability() {
		StateMutabilityContext _localctx = new StateMutabilityContext(Context, State);
		EnterRule(_localctx, 70, RULE_stateMutability);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (ConstantKeyword - 106)) | (1L << (PayableKeyword - 106)) | (1L << (PureKeyword - 106)) | (1L << (ViewKeyword - 106)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 72, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530; Match(T__13);
			State = 534;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__13) | (1L << T__21) | (1L << T__25) | (1L << T__28) | (1L << T__32) | (1L << T__35) | (1L << T__39) | (1L << T__40) | (1L << T__42) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (Int - 64)) | (1L << (Uint - 64)) | (1L << (Byte - 64)) | (1L << (Fixed - 64)) | (1L << (Ufixed - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (DecimalNumber - 64)) | (1L << (HexNumber - 64)) | (1L << (HexLiteralFragment - 64)) | (1L << (BreakKeyword - 64)) | (1L << (ContinueKeyword - 64)) | (1L << (PayableKeyword - 64)) | (1L << (TypeKeyword - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteralFragment - 64)))) != 0)) {
				{
				{
				State = 531; statement();
				}
				}
				State = 536;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 537; Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public InlineAssemblyStatementContext inlineAssemblyStatement() {
			return GetRuleContext<InlineAssemblyStatementContext>(0);
		}
		public DoWhileStatementContext doWhileStatement() {
			return GetRuleContext<DoWhileStatementContext>(0);
		}
		public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		public EmitStatementContext emitStatement() {
			return GetRuleContext<EmitStatementContext>(0);
		}
		public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_statement);
		try {
			State = 552;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__40:
				EnterOuterAlt(_localctx, 1);
				{
				State = 539; ifStatement();
				}
				break;
			case T__42:
				EnterOuterAlt(_localctx, 2);
				{
				State = 540; tryStatement();
				}
				break;
			case T__44:
				EnterOuterAlt(_localctx, 3);
				{
				State = 541; whileStatement();
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 4);
				{
				State = 542; forStatement();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 5);
				{
				State = 543; block();
				}
				break;
			case T__45:
				EnterOuterAlt(_localctx, 6);
				{
				State = 544; inlineAssemblyStatement();
				}
				break;
			case T__46:
				EnterOuterAlt(_localctx, 7);
				{
				State = 545; doWhileStatement();
				}
				break;
			case ContinueKeyword:
				EnterOuterAlt(_localctx, 8);
				{
				State = 546; continueStatement();
				}
				break;
			case BreakKeyword:
				EnterOuterAlt(_localctx, 9);
				{
				State = 547; breakStatement();
				}
				break;
			case T__47:
				EnterOuterAlt(_localctx, 10);
				{
				State = 548; returnStatement();
				}
				break;
			case T__48:
				EnterOuterAlt(_localctx, 11);
				{
				State = 549; throwStatement();
				}
				break;
			case T__49:
				EnterOuterAlt(_localctx, 12);
				{
				State = 550; emitStatement();
				}
				break;
			case T__3:
			case T__12:
			case T__21:
			case T__28:
			case T__32:
			case T__35:
			case T__39:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
			case BooleanLiteral:
			case DecimalNumber:
			case HexNumber:
			case HexLiteralFragment:
			case PayableKeyword:
			case TypeKeyword:
			case Identifier:
			case StringLiteralFragment:
				EnterOuterAlt(_localctx, 13);
				{
				State = 551; simpleStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 554; expression(0);
			State = 555; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557; Match(T__40);
			State = 558; Match(T__21);
			State = 559; expression(0);
			State = 560; Match(T__22);
			State = 561; statement();
			State = 564;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				{
				State = 562; Match(T__41);
				State = 563; statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ReturnParametersContext returnParameters() {
			return GetRuleContext<ReturnParametersContext>(0);
		}
		public CatchClauseContext[] catchClause() {
			return GetRuleContexts<CatchClauseContext>();
		}
		public CatchClauseContext catchClause(int i) {
			return GetRuleContext<CatchClauseContext>(i);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_tryStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 566; Match(T__42);
			State = 567; expression(0);
			State = 569;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 568; returnParameters();
				}
			}

			State = 571; block();
			State = 573;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 572; catchClause();
				}
				}
				State = 575;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__43 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchClauseContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public CatchClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterCatchClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitCatchClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchClauseContext catchClause() {
		CatchClauseContext _localctx = new CatchClauseContext(Context, State);
		EnterRule(_localctx, 82, RULE_catchClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577; Match(T__43);
			State = 582;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__21) | (1L << T__39) | (1L << T__51))) != 0) || _la==Identifier) {
				{
				State = 579;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__39) | (1L << T__51))) != 0) || _la==Identifier) {
					{
					State = 578; identifier();
					}
				}

				State = 581; parameterList();
				}
			}

			State = 584; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 84, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 586; Match(T__44);
			State = 587; Match(T__21);
			State = 588; expression(0);
			State = 589; Match(T__22);
			State = 590; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 86, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 592; Match(T__25);
			State = 593; Match(T__21);
			State = 596;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case T__12:
			case T__21:
			case T__28:
			case T__32:
			case T__35:
			case T__39:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
			case BooleanLiteral:
			case DecimalNumber:
			case HexNumber:
			case HexLiteralFragment:
			case PayableKeyword:
			case TypeKeyword:
			case Identifier:
			case StringLiteralFragment:
				{
				State = 594; simpleStatement();
				}
				break;
			case T__1:
				{
				State = 595; Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 600;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case T__12:
			case T__21:
			case T__32:
			case T__39:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
			case BooleanLiteral:
			case DecimalNumber:
			case HexNumber:
			case HexLiteralFragment:
			case PayableKeyword:
			case TypeKeyword:
			case Identifier:
			case StringLiteralFragment:
				{
				State = 598; expressionStatement();
				}
				break;
			case T__1:
				{
				State = 599; Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 603;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__21) | (1L << T__32) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (Int - 64)) | (1L << (Uint - 64)) | (1L << (Byte - 64)) | (1L << (Fixed - 64)) | (1L << (Ufixed - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (DecimalNumber - 64)) | (1L << (HexNumber - 64)) | (1L << (HexLiteralFragment - 64)) | (1L << (PayableKeyword - 64)) | (1L << (TypeKeyword - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteralFragment - 64)))) != 0)) {
				{
				State = 602; expression(0);
				}
			}

			State = 605; Match(T__22);
			State = 606; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStatementContext : ParserRuleContext {
		public VariableDeclarationStatementContext variableDeclarationStatement() {
			return GetRuleContext<VariableDeclarationStatementContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterSimpleStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitSimpleStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStatementContext simpleStatement() {
		SimpleStatementContext _localctx = new SimpleStatementContext(Context, State);
		EnterRule(_localctx, 88, RULE_simpleStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 610;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				{
				State = 608; variableDeclarationStatement();
				}
				break;
			case 2:
				{
				State = 609; expressionStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineAssemblyStatementContext : ParserRuleContext {
		public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		public ITerminalNode StringLiteralFragment() { return GetToken(SolidityParser.StringLiteralFragment, 0); }
		public InlineAssemblyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineAssemblyStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterInlineAssemblyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitInlineAssemblyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineAssemblyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineAssemblyStatementContext inlineAssemblyStatement() {
		InlineAssemblyStatementContext _localctx = new InlineAssemblyStatementContext(Context, State);
		EnterRule(_localctx, 90, RULE_inlineAssemblyStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 612; Match(T__45);
			State = 614;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==StringLiteralFragment) {
				{
				State = 613; Match(StringLiteralFragment);
				}
			}

			State = 616; assemblyBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoWhileStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DoWhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doWhileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterDoWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitDoWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoWhileStatementContext doWhileStatement() {
		DoWhileStatementContext _localctx = new DoWhileStatementContext(Context, State);
		EnterRule(_localctx, 92, RULE_doWhileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 618; Match(T__46);
			State = 619; statement();
			State = 620; Match(T__44);
			State = 621; Match(T__21);
			State = 622; expression(0);
			State = 623; Match(T__22);
			State = 624; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		public ITerminalNode ContinueKeyword() { return GetToken(SolidityParser.ContinueKeyword, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 94, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 626; Match(ContinueKeyword);
			State = 627; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		public ITerminalNode BreakKeyword() { return GetToken(SolidityParser.BreakKeyword, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 629; Match(BreakKeyword);
			State = 630; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632; Match(T__47);
			State = 634;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__21) | (1L << T__32) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (Int - 64)) | (1L << (Uint - 64)) | (1L << (Byte - 64)) | (1L << (Fixed - 64)) | (1L << (Ufixed - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (DecimalNumber - 64)) | (1L << (HexNumber - 64)) | (1L << (HexLiteralFragment - 64)) | (1L << (PayableKeyword - 64)) | (1L << (TypeKeyword - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteralFragment - 64)))) != 0)) {
				{
				State = 633; expression(0);
				}
			}

			State = 636; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 638; Match(T__48);
			State = 639; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmitStatementContext : ParserRuleContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public EmitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emitStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEmitStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEmitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmitStatementContext emitStatement() {
		EmitStatementContext _localctx = new EmitStatementContext(Context, State);
		EnterRule(_localctx, 102, RULE_emitStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 641; Match(T__49);
			State = 642; functionCall();
			State = 643; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationStatementContext : ParserRuleContext {
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationStatementContext variableDeclarationStatement() {
		VariableDeclarationStatementContext _localctx = new VariableDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 104, RULE_variableDeclarationStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				{
				State = 645; Match(T__50);
				State = 646; identifierList();
				}
				break;
			case 2:
				{
				State = 647; variableDeclaration();
				}
				break;
			case 3:
				{
				State = 648; Match(T__21);
				State = 649; variableDeclarationList();
				State = 650; Match(T__22);
				}
				break;
			}
			State = 656;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 654; Match(T__8);
				State = 655; expression(0);
				}
			}

			State = 658; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationListContext : ParserRuleContext {
		public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		public VariableDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationListContext variableDeclarationList() {
		VariableDeclarationListContext _localctx = new VariableDeclarationListContext(Context, State);
		EnterRule(_localctx, 106, RULE_variableDeclarationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 661;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__28) | (1L << T__35) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Int - 93)) | (1L << (Uint - 93)) | (1L << (Byte - 93)) | (1L << (Fixed - 93)) | (1L << (Ufixed - 93)) | (1L << (Identifier - 93)))) != 0)) {
				{
				State = 660; variableDeclaration();
				}
			}

			State = 669;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 663; Match(T__14);
				State = 665;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__28) | (1L << T__35) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Int - 93)) | (1L << (Uint - 93)) | (1L << (Byte - 93)) | (1L << (Fixed - 93)) | (1L << (Ufixed - 93)) | (1L << (Identifier - 93)))) != 0)) {
					{
					State = 664; variableDeclaration();
					}
				}

				}
				}
				State = 671;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 108, RULE_identifierList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 672; Match(T__21);
			State = 679;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 674;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__39) | (1L << T__51))) != 0) || _la==Identifier) {
						{
						State = 673; identifier();
						}
					}

					State = 676; Match(T__14);
					}
					} 
				}
				State = 681;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			}
			State = 683;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__39) | (1L << T__51))) != 0) || _la==Identifier) {
				{
				State = 682; identifier();
				}
			}

			State = 685; Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementaryTypeNameContext : ParserRuleContext {
		public ITerminalNode PayableKeyword() { return GetToken(SolidityParser.PayableKeyword, 0); }
		public ITerminalNode Int() { return GetToken(SolidityParser.Int, 0); }
		public ITerminalNode Uint() { return GetToken(SolidityParser.Uint, 0); }
		public ITerminalNode Byte() { return GetToken(SolidityParser.Byte, 0); }
		public ITerminalNode Fixed() { return GetToken(SolidityParser.Fixed, 0); }
		public ITerminalNode Ufixed() { return GetToken(SolidityParser.Ufixed, 0); }
		public ElementaryTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementaryTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterElementaryTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitElementaryTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementaryTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementaryTypeNameContext elementaryTypeName() {
		ElementaryTypeNameContext _localctx = new ElementaryTypeNameContext(Context, State);
		EnterRule(_localctx, 110, RULE_elementaryTypeName);
		try {
			State = 700;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__51:
				EnterOuterAlt(_localctx, 1);
				{
				State = 687; Match(T__51);
				State = 689;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
				case 1:
					{
					State = 688; Match(PayableKeyword);
					}
					break;
				}
				}
				break;
			case T__52:
				EnterOuterAlt(_localctx, 2);
				{
				State = 691; Match(T__52);
				}
				break;
			case T__53:
				EnterOuterAlt(_localctx, 3);
				{
				State = 692; Match(T__53);
				}
				break;
			case T__50:
				EnterOuterAlt(_localctx, 4);
				{
				State = 693; Match(T__50);
				}
				break;
			case Int:
				EnterOuterAlt(_localctx, 5);
				{
				State = 694; Match(Int);
				}
				break;
			case Uint:
				EnterOuterAlt(_localctx, 6);
				{
				State = 695; Match(Uint);
				}
				break;
			case T__54:
				EnterOuterAlt(_localctx, 7);
				{
				State = 696; Match(T__54);
				}
				break;
			case Byte:
				EnterOuterAlt(_localctx, 8);
				{
				State = 697; Match(Byte);
				}
				break;
			case Fixed:
				EnterOuterAlt(_localctx, 9);
				{
				State = 698; Match(Fixed);
				}
				break;
			case Ufixed:
				EnterOuterAlt(_localctx, 10);
				{
				State = 699; Match(Ufixed);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode PayableKeyword() { return GetToken(SolidityParser.PayableKeyword, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public NameValueListContext nameValueList() {
			return GetRuleContext<NameValueListContext>(0);
		}
		public FunctionCallArgumentsContext functionCallArguments() {
			return GetRuleContext<FunctionCallArgumentsContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 112;
		EnterRecursionRule(_localctx, 112, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 725;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				{
				State = 703; Match(T__57);
				State = 704; typeName(0);
				}
				break;
			case 2:
				{
				State = 705; Match(PayableKeyword);
				State = 706; Match(T__21);
				State = 707; expression(0);
				State = 708; Match(T__22);
				}
				break;
			case 3:
				{
				State = 710; Match(T__21);
				State = 711; expression(0);
				State = 712; Match(T__22);
				}
				break;
			case 4:
				{
				State = 714;
				_la = TokenStream.LA(1);
				if ( !(_la==T__55 || _la==T__56) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 715; expression(19);
				}
				break;
			case 5:
				{
				State = 716;
				_la = TokenStream.LA(1);
				if ( !(_la==T__59 || _la==T__60) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 717; expression(18);
				}
				break;
			case 6:
				{
				State = 718;
				_la = TokenStream.LA(1);
				if ( !(_la==T__61 || _la==T__62) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 719; expression(17);
				}
				break;
			case 7:
				{
				State = 720; Match(T__63);
				State = 721; expression(16);
				}
				break;
			case 8:
				{
				State = 722; Match(T__3);
				State = 723; expression(15);
				}
				break;
			case 9:
				{
				State = 724; primaryExpression();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 802;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 800;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 727;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 728; Match(T__64);
						State = 729; expression(15);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 730;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 731;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (T__11 - 12)) | (1L << (T__65 - 12)) | (1L << (T__66 - 12)))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 732; expression(14);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 733;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 734;
						_la = TokenStream.LA(1);
						if ( !(_la==T__59 || _la==T__60) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 735; expression(13);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 736;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 737;
						_la = TokenStream.LA(1);
						if ( !(_la==T__67 || _la==T__68) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 738; expression(12);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 739;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 740; Match(T__69);
						State = 741; expression(11);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 742;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 743; Match(T__2);
						State = 744; expression(10);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 745;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 746; Match(T__70);
						State = 747; expression(9);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 748;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 749;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 750; expression(8);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 751;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 752;
						_la = TokenStream.LA(1);
						if ( !(_la==T__71 || _la==T__72) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 753; expression(7);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 754;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 755; Match(T__73);
						State = 756; expression(6);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 757;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 758; Match(T__74);
						State = 759; expression(5);
						}
						break;
					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 760;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 761; Match(T__75);
						State = 762; expression(0);
						State = 763; Match(T__58);
						State = 764; expression(4);
						}
						break;
					case 13:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 766;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 767;
						_la = TokenStream.LA(1);
						if ( !(_la==T__8 || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (T__76 - 77)) | (1L << (T__77 - 77)) | (1L << (T__78 - 77)) | (1L << (T__79 - 77)) | (1L << (T__80 - 77)) | (1L << (T__81 - 77)) | (1L << (T__82 - 77)) | (1L << (T__83 - 77)) | (1L << (T__84 - 77)) | (1L << (T__85 - 77)))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 768; expression(3);
						}
						break;
					case 14:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 769;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 770;
						_la = TokenStream.LA(1);
						if ( !(_la==T__55 || _la==T__56) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 15:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 771;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 772; Match(T__32);
						State = 774;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__21) | (1L << T__32) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (Int - 64)) | (1L << (Uint - 64)) | (1L << (Byte - 64)) | (1L << (Fixed - 64)) | (1L << (Ufixed - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (DecimalNumber - 64)) | (1L << (HexNumber - 64)) | (1L << (HexLiteralFragment - 64)) | (1L << (PayableKeyword - 64)) | (1L << (TypeKeyword - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteralFragment - 64)))) != 0)) {
							{
							State = 773; expression(0);
							}
						}

						State = 776; Match(T__33);
						}
						break;
					case 16:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 777;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 778; Match(T__32);
						State = 780;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__21) | (1L << T__32) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (Int - 64)) | (1L << (Uint - 64)) | (1L << (Byte - 64)) | (1L << (Fixed - 64)) | (1L << (Ufixed - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (DecimalNumber - 64)) | (1L << (HexNumber - 64)) | (1L << (HexLiteralFragment - 64)) | (1L << (PayableKeyword - 64)) | (1L << (TypeKeyword - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteralFragment - 64)))) != 0)) {
							{
							State = 779; expression(0);
							}
						}

						State = 782; Match(T__58);
						State = 784;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__21) | (1L << T__32) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (Int - 64)) | (1L << (Uint - 64)) | (1L << (Byte - 64)) | (1L << (Fixed - 64)) | (1L << (Ufixed - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (DecimalNumber - 64)) | (1L << (HexNumber - 64)) | (1L << (HexLiteralFragment - 64)) | (1L << (PayableKeyword - 64)) | (1L << (TypeKeyword - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteralFragment - 64)))) != 0)) {
							{
							State = 783; expression(0);
							}
						}

						State = 786; Match(T__33);
						}
						break;
					case 17:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 787;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 788; Match(T__34);
						State = 789; identifier();
						}
						break;
					case 18:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 790;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 791; Match(T__13);
						State = 792; nameValueList();
						State = 793; Match(T__15);
						}
						break;
					case 19:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 795;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 796; Match(T__21);
						State = 797; functionCallArguments();
						State = 798; Match(T__22);
						}
						break;
					}
					} 
				}
				State = 804;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public ITerminalNode BooleanLiteral() { return GetToken(SolidityParser.BooleanLiteral, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public HexLiteralContext hexLiteral() {
			return GetRuleContext<HexLiteralContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TypeKeyword() { return GetToken(SolidityParser.TypeKeyword, 0); }
		public TupleExpressionContext tupleExpression() {
			return GetRuleContext<TupleExpressionContext>(0);
		}
		public TypeNameExpressionContext typeNameExpression() {
			return GetRuleContext<TypeNameExpressionContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 114, RULE_primaryExpression);
		try {
			State = 821;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 805; Match(BooleanLiteral);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 806; numberLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 807; hexLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 808; stringLiteral();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 809; identifier();
				State = 812;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
				case 1:
					{
					State = 810; Match(T__32);
					State = 811; Match(T__33);
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 814; Match(TypeKeyword);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 815; tupleExpression();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 816; typeNameExpression();
				State = 819;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
				case 1:
					{
					State = 817; Match(T__32);
					State = 818; Match(T__33);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 116, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823; expression(0);
			State = 828;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 824; Match(T__14);
				State = 825; expression(0);
				}
				}
				State = 830;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameValueListContext : ParserRuleContext {
		public NameValueContext[] nameValue() {
			return GetRuleContexts<NameValueContext>();
		}
		public NameValueContext nameValue(int i) {
			return GetRuleContext<NameValueContext>(i);
		}
		public NameValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameValueList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterNameValueList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitNameValueList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameValueList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameValueListContext nameValueList() {
		NameValueListContext _localctx = new NameValueListContext(Context, State);
		EnterRule(_localctx, 118, RULE_nameValueList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 831; nameValue();
			State = 836;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,89,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 832; Match(T__14);
					State = 833; nameValue();
					}
					} 
				}
				State = 838;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,89,Context);
			}
			State = 840;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 839; Match(T__14);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameValueContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NameValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterNameValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitNameValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameValueContext nameValue() {
		NameValueContext _localctx = new NameValueContext(Context, State);
		EnterRule(_localctx, 120, RULE_nameValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 842; identifier();
			State = 843; Match(T__58);
			State = 844; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallArgumentsContext : ParserRuleContext {
		public NameValueListContext nameValueList() {
			return GetRuleContext<NameValueListContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public FunctionCallArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionCallArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionCallArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallArgumentsContext functionCallArguments() {
		FunctionCallArgumentsContext _localctx = new FunctionCallArgumentsContext(Context, State);
		EnterRule(_localctx, 122, RULE_functionCallArguments);
		int _la;
		try {
			State = 854;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				EnterOuterAlt(_localctx, 1);
				{
				State = 846; Match(T__13);
				State = 848;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__39) | (1L << T__51))) != 0) || _la==Identifier) {
					{
					State = 847; nameValueList();
					}
				}

				State = 850; Match(T__15);
				}
				break;
			case T__3:
			case T__12:
			case T__21:
			case T__22:
			case T__32:
			case T__39:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
			case BooleanLiteral:
			case DecimalNumber:
			case HexNumber:
			case HexLiteralFragment:
			case PayableKeyword:
			case TypeKeyword:
			case Identifier:
			case StringLiteralFragment:
				EnterOuterAlt(_localctx, 2);
				{
				State = 852;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__21) | (1L << T__32) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (Int - 64)) | (1L << (Uint - 64)) | (1L << (Byte - 64)) | (1L << (Fixed - 64)) | (1L << (Ufixed - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (DecimalNumber - 64)) | (1L << (HexNumber - 64)) | (1L << (HexLiteralFragment - 64)) | (1L << (PayableKeyword - 64)) | (1L << (TypeKeyword - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteralFragment - 64)))) != 0)) {
					{
					State = 851; expressionList();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionCallArgumentsContext functionCallArguments() {
			return GetRuleContext<FunctionCallArgumentsContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 124, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 856; expression(0);
			State = 857; Match(T__21);
			State = 858; functionCallArguments();
			State = 859; Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TupleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterTupleExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitTupleExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleExpressionContext tupleExpression() {
		TupleExpressionContext _localctx = new TupleExpressionContext(Context, State);
		EnterRule(_localctx, 126, RULE_tupleExpression);
		int _la;
		try {
			State = 887;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__21:
				EnterOuterAlt(_localctx, 1);
				{
				State = 861; Match(T__21);
				{
				State = 863;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__21) | (1L << T__32) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (Int - 64)) | (1L << (Uint - 64)) | (1L << (Byte - 64)) | (1L << (Fixed - 64)) | (1L << (Ufixed - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (DecimalNumber - 64)) | (1L << (HexNumber - 64)) | (1L << (HexLiteralFragment - 64)) | (1L << (PayableKeyword - 64)) | (1L << (TypeKeyword - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteralFragment - 64)))) != 0)) {
					{
					State = 862; expression(0);
					}
				}

				State = 871;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 865; Match(T__14);
					State = 867;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__21) | (1L << T__32) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (Int - 64)) | (1L << (Uint - 64)) | (1L << (Byte - 64)) | (1L << (Fixed - 64)) | (1L << (Ufixed - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (DecimalNumber - 64)) | (1L << (HexNumber - 64)) | (1L << (HexLiteralFragment - 64)) | (1L << (PayableKeyword - 64)) | (1L << (TypeKeyword - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteralFragment - 64)))) != 0)) {
						{
						State = 866; expression(0);
						}
					}

					}
					}
					State = 873;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				State = 874; Match(T__22);
				}
				break;
			case T__32:
				EnterOuterAlt(_localctx, 2);
				{
				State = 875; Match(T__32);
				State = 884;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__21) | (1L << T__32) | (1L << T__39) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (Int - 64)) | (1L << (Uint - 64)) | (1L << (Byte - 64)) | (1L << (Fixed - 64)) | (1L << (Ufixed - 64)) | (1L << (BooleanLiteral - 64)) | (1L << (DecimalNumber - 64)) | (1L << (HexNumber - 64)) | (1L << (HexLiteralFragment - 64)) | (1L << (PayableKeyword - 64)) | (1L << (TypeKeyword - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteralFragment - 64)))) != 0)) {
					{
					State = 876; expression(0);
					State = 881;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__14) {
						{
						{
						State = 877; Match(T__14);
						State = 878; expression(0);
						}
						}
						State = 883;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 886; Match(T__33);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameExpressionContext : ParserRuleContext {
		public ElementaryTypeNameContext elementaryTypeName() {
			return GetRuleContext<ElementaryTypeNameContext>(0);
		}
		public UserDefinedTypeNameContext userDefinedTypeName() {
			return GetRuleContext<UserDefinedTypeNameContext>(0);
		}
		public TypeNameExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeNameExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterTypeNameExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitTypeNameExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeNameExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameExpressionContext typeNameExpression() {
		TypeNameExpressionContext _localctx = new TypeNameExpressionContext(Context, State);
		EnterRule(_localctx, 128, RULE_typeNameExpression);
		try {
			State = 891;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 889; elementaryTypeName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 890; userDefinedTypeName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyItemContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		public AssemblyLocalDefinitionContext assemblyLocalDefinition() {
			return GetRuleContext<AssemblyLocalDefinitionContext>(0);
		}
		public AssemblyAssignmentContext assemblyAssignment() {
			return GetRuleContext<AssemblyAssignmentContext>(0);
		}
		public AssemblyStackAssignmentContext assemblyStackAssignment() {
			return GetRuleContext<AssemblyStackAssignmentContext>(0);
		}
		public LabelDefinitionContext labelDefinition() {
			return GetRuleContext<LabelDefinitionContext>(0);
		}
		public AssemblySwitchContext assemblySwitch() {
			return GetRuleContext<AssemblySwitchContext>(0);
		}
		public AssemblyFunctionDefinitionContext assemblyFunctionDefinition() {
			return GetRuleContext<AssemblyFunctionDefinitionContext>(0);
		}
		public AssemblyForContext assemblyFor() {
			return GetRuleContext<AssemblyForContext>(0);
		}
		public AssemblyIfContext assemblyIf() {
			return GetRuleContext<AssemblyIfContext>(0);
		}
		public ITerminalNode BreakKeyword() { return GetToken(SolidityParser.BreakKeyword, 0); }
		public ITerminalNode ContinueKeyword() { return GetToken(SolidityParser.ContinueKeyword, 0); }
		public ITerminalNode LeaveKeyword() { return GetToken(SolidityParser.LeaveKeyword, 0); }
		public SubAssemblyContext subAssembly() {
			return GetRuleContext<SubAssemblyContext>(0);
		}
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public HexLiteralContext hexLiteral() {
			return GetRuleContext<HexLiteralContext>(0);
		}
		public AssemblyItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyItemContext assemblyItem() {
		AssemblyItemContext _localctx = new AssemblyItemContext(Context, State);
		EnterRule(_localctx, 130, RULE_assemblyItem);
		try {
			State = 911;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 893; identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 894; assemblyBlock();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 895; assemblyExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 896; assemblyLocalDefinition();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 897; assemblyAssignment();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 898; assemblyStackAssignment();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 899; labelDefinition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 900; assemblySwitch();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 901; assemblyFunctionDefinition();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 902; assemblyFor();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 903; assemblyIf();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 904; Match(BreakKeyword);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 905; Match(ContinueKeyword);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 906; Match(LeaveKeyword);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 907; subAssembly();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 908; numberLiteral();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 909; stringLiteral();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 910; hexLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyBlockContext : ParserRuleContext {
		public AssemblyItemContext[] assemblyItem() {
			return GetRuleContexts<AssemblyItemContext>();
		}
		public AssemblyItemContext assemblyItem(int i) {
			return GetRuleContext<AssemblyItemContext>(i);
		}
		public AssemblyBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyBlockContext assemblyBlock() {
		AssemblyBlockContext _localctx = new AssemblyBlockContext(Context, State);
		EnterRule(_localctx, 132, RULE_assemblyBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 913; Match(T__13);
			State = 917;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__13) | (1L << T__25) | (1L << T__28) | (1L << T__39) | (1L << T__40) | (1L << T__45) | (1L << T__47) | (1L << T__51) | (1L << T__54))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (T__86 - 87)) | (1L << (T__88 - 87)) | (1L << (T__89 - 87)) | (1L << (BooleanLiteral - 87)) | (1L << (DecimalNumber - 87)) | (1L << (HexNumber - 87)) | (1L << (HexLiteralFragment - 87)) | (1L << (BreakKeyword - 87)) | (1L << (ContinueKeyword - 87)) | (1L << (LeaveKeyword - 87)) | (1L << (Identifier - 87)) | (1L << (StringLiteralFragment - 87)))) != 0)) {
				{
				{
				State = 914; assemblyItem();
				}
				}
				State = 919;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 920; Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyExpressionContext : ParserRuleContext {
		public AssemblyCallContext assemblyCall() {
			return GetRuleContext<AssemblyCallContext>(0);
		}
		public AssemblyLiteralContext assemblyLiteral() {
			return GetRuleContext<AssemblyLiteralContext>(0);
		}
		public AssemblyExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyExpressionContext assemblyExpression() {
		AssemblyExpressionContext _localctx = new AssemblyExpressionContext(Context, State);
		EnterRule(_localctx, 134, RULE_assemblyExpression);
		try {
			State = 924;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__12:
			case T__39:
			case T__47:
			case T__51:
			case T__54:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 922; assemblyCall();
				}
				break;
			case BooleanLiteral:
			case DecimalNumber:
			case HexNumber:
			case HexLiteralFragment:
			case StringLiteralFragment:
				EnterOuterAlt(_localctx, 2);
				{
				State = 923; assemblyLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyCallContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssemblyExpressionContext[] assemblyExpression() {
			return GetRuleContexts<AssemblyExpressionContext>();
		}
		public AssemblyExpressionContext assemblyExpression(int i) {
			return GetRuleContext<AssemblyExpressionContext>(i);
		}
		public AssemblyCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyCallContext assemblyCall() {
		AssemblyCallContext _localctx = new AssemblyCallContext(Context, State);
		EnterRule(_localctx, 136, RULE_assemblyCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 930;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				{
				State = 926; Match(T__47);
				}
				break;
			case 2:
				{
				State = 927; Match(T__51);
				}
				break;
			case 3:
				{
				State = 928; Match(T__54);
				}
				break;
			case 4:
				{
				State = 929; identifier();
				}
				break;
			}
			State = 944;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__21) {
				{
				State = 932; Match(T__21);
				State = 934;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__39) | (1L << T__47) | (1L << T__51) | (1L << T__54))) != 0) || ((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & ((1L << (BooleanLiteral - 98)) | (1L << (DecimalNumber - 98)) | (1L << (HexNumber - 98)) | (1L << (HexLiteralFragment - 98)) | (1L << (Identifier - 98)) | (1L << (StringLiteralFragment - 98)))) != 0)) {
					{
					State = 933; assemblyExpression();
					}
				}

				State = 940;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 936; Match(T__14);
					State = 937; assemblyExpression();
					}
					}
					State = 942;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 943; Match(T__22);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyLocalDefinitionContext : ParserRuleContext {
		public AssemblyIdentifierListContext assemblyIdentifierList() {
			return GetRuleContext<AssemblyIdentifierListContext>(0);
		}
		public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		public AssemblyLocalDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyLocalDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyLocalDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyLocalDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyLocalDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyLocalDefinitionContext assemblyLocalDefinition() {
		AssemblyLocalDefinitionContext _localctx = new AssemblyLocalDefinitionContext(Context, State);
		EnterRule(_localctx, 138, RULE_assemblyLocalDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 946; Match(T__86);
			State = 947; assemblyIdentifierList();
			State = 950;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__87) {
				{
				State = 948; Match(T__87);
				State = 949; assemblyExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyAssignmentContext : ParserRuleContext {
		public AssemblyIdentifierListContext assemblyIdentifierList() {
			return GetRuleContext<AssemblyIdentifierListContext>(0);
		}
		public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		public AssemblyAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyAssignmentContext assemblyAssignment() {
		AssemblyAssignmentContext _localctx = new AssemblyAssignmentContext(Context, State);
		EnterRule(_localctx, 140, RULE_assemblyAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 952; assemblyIdentifierList();
			State = 953; Match(T__87);
			State = 954; assemblyExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyIdentifierListContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public AssemblyIdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyIdentifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyIdentifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyIdentifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyIdentifierListContext assemblyIdentifierList() {
		AssemblyIdentifierListContext _localctx = new AssemblyIdentifierListContext(Context, State);
		EnterRule(_localctx, 142, RULE_assemblyIdentifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 956; identifier();
			State = 961;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 957; Match(T__14);
				State = 958; identifier();
				}
				}
				State = 963;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyStackAssignmentContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssemblyStackAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyStackAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyStackAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyStackAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyStackAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyStackAssignmentContext assemblyStackAssignment() {
		AssemblyStackAssignmentContext _localctx = new AssemblyStackAssignmentContext(Context, State);
		EnterRule(_localctx, 144, RULE_assemblyStackAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 964; Match(T__88);
			State = 965; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelDefinitionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LabelDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterLabelDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitLabelDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelDefinitionContext labelDefinition() {
		LabelDefinitionContext _localctx = new LabelDefinitionContext(Context, State);
		EnterRule(_localctx, 146, RULE_labelDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 967; identifier();
			State = 968; Match(T__58);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblySwitchContext : ParserRuleContext {
		public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		public AssemblyCaseContext[] assemblyCase() {
			return GetRuleContexts<AssemblyCaseContext>();
		}
		public AssemblyCaseContext assemblyCase(int i) {
			return GetRuleContext<AssemblyCaseContext>(i);
		}
		public AssemblySwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblySwitch; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblySwitch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblySwitch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblySwitch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblySwitchContext assemblySwitch() {
		AssemblySwitchContext _localctx = new AssemblySwitchContext(Context, State);
		EnterRule(_localctx, 148, RULE_assemblySwitch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 970; Match(T__89);
			State = 971; assemblyExpression();
			State = 975;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__90 || _la==T__91) {
				{
				{
				State = 972; assemblyCase();
				}
				}
				State = 977;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyCaseContext : ParserRuleContext {
		public AssemblyLiteralContext assemblyLiteral() {
			return GetRuleContext<AssemblyLiteralContext>(0);
		}
		public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		public AssemblyTypeContext assemblyType() {
			return GetRuleContext<AssemblyTypeContext>(0);
		}
		public AssemblyCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyCase; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyCase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyCase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyCaseContext assemblyCase() {
		AssemblyCaseContext _localctx = new AssemblyCaseContext(Context, State);
		EnterRule(_localctx, 150, RULE_assemblyCase);
		int _la;
		try {
			State = 987;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__90:
				EnterOuterAlt(_localctx, 1);
				{
				State = 978; Match(T__90);
				State = 979; assemblyLiteral();
				State = 981;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__58) {
					{
					State = 980; assemblyType();
					}
				}

				State = 983; assemblyBlock();
				}
				break;
			case T__91:
				EnterOuterAlt(_localctx, 2);
				{
				State = 985; Match(T__91);
				State = 986; assemblyBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyFunctionDefinitionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		public AssemblyTypedVariableListContext assemblyTypedVariableList() {
			return GetRuleContext<AssemblyTypedVariableListContext>(0);
		}
		public AssemblyFunctionReturnsContext assemblyFunctionReturns() {
			return GetRuleContext<AssemblyFunctionReturnsContext>(0);
		}
		public AssemblyFunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyFunctionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyFunctionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyFunctionDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyFunctionDefinitionContext assemblyFunctionDefinition() {
		AssemblyFunctionDefinitionContext _localctx = new AssemblyFunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 152, RULE_assemblyFunctionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 989; Match(T__28);
			State = 990; identifier();
			State = 991; Match(T__21);
			State = 993;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__39) | (1L << T__51))) != 0) || _la==Identifier) {
				{
				State = 992; assemblyTypedVariableList();
				}
			}

			State = 995; Match(T__22);
			State = 997;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__60) {
				{
				State = 996; assemblyFunctionReturns();
				}
			}

			State = 999; assemblyBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyFunctionReturnsContext : ParserRuleContext {
		public AssemblyTypedVariableListContext assemblyTypedVariableList() {
			return GetRuleContext<AssemblyTypedVariableListContext>(0);
		}
		public AssemblyFunctionReturnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyFunctionReturns; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyFunctionReturns(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyFunctionReturns(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyFunctionReturns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyFunctionReturnsContext assemblyFunctionReturns() {
		AssemblyFunctionReturnsContext _localctx = new AssemblyFunctionReturnsContext(Context, State);
		EnterRule(_localctx, 154, RULE_assemblyFunctionReturns);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1001; Match(T__60);
			State = 1002; Match(T__5);
			State = 1003; assemblyTypedVariableList();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyForContext : ParserRuleContext {
		public AssemblyBlockContext[] assemblyBlock() {
			return GetRuleContexts<AssemblyBlockContext>();
		}
		public AssemblyBlockContext assemblyBlock(int i) {
			return GetRuleContext<AssemblyBlockContext>(i);
		}
		public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		public AssemblyForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyFor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyFor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyFor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyForContext assemblyFor() {
		AssemblyForContext _localctx = new AssemblyForContext(Context, State);
		EnterRule(_localctx, 156, RULE_assemblyFor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1005; Match(T__25);
			State = 1006; assemblyBlock();
			State = 1007; assemblyExpression();
			State = 1008; assemblyBlock();
			State = 1009; assemblyBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyIfContext : ParserRuleContext {
		public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		public AssemblyIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyIfContext assemblyIf() {
		AssemblyIfContext _localctx = new AssemblyIfContext(Context, State);
		EnterRule(_localctx, 158, RULE_assemblyIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1011; Match(T__40);
			State = 1012; assemblyExpression();
			State = 1013; assemblyBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyLiteralContext : ParserRuleContext {
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ITerminalNode DecimalNumber() { return GetToken(SolidityParser.DecimalNumber, 0); }
		public ITerminalNode HexNumber() { return GetToken(SolidityParser.HexNumber, 0); }
		public HexLiteralContext hexLiteral() {
			return GetRuleContext<HexLiteralContext>(0);
		}
		public ITerminalNode BooleanLiteral() { return GetToken(SolidityParser.BooleanLiteral, 0); }
		public AssemblyTypeContext assemblyType() {
			return GetRuleContext<AssemblyTypeContext>(0);
		}
		public AssemblyLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyLiteralContext assemblyLiteral() {
		AssemblyLiteralContext _localctx = new AssemblyLiteralContext(Context, State);
		EnterRule(_localctx, 160, RULE_assemblyLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1020;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringLiteralFragment:
				{
				State = 1015; stringLiteral();
				}
				break;
			case DecimalNumber:
				{
				State = 1016; Match(DecimalNumber);
				}
				break;
			case HexNumber:
				{
				State = 1017; Match(HexNumber);
				}
				break;
			case HexLiteralFragment:
				{
				State = 1018; hexLiteral();
				}
				break;
			case BooleanLiteral:
				{
				State = 1019; Match(BooleanLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1023;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				{
				State = 1022; assemblyType();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyTypedVariableListContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssemblyTypeContext assemblyType() {
			return GetRuleContext<AssemblyTypeContext>(0);
		}
		public AssemblyTypedVariableListContext assemblyTypedVariableList() {
			return GetRuleContext<AssemblyTypedVariableListContext>(0);
		}
		public AssemblyTypedVariableListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyTypedVariableList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyTypedVariableList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyTypedVariableList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyTypedVariableList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyTypedVariableListContext assemblyTypedVariableList() {
		AssemblyTypedVariableListContext _localctx = new AssemblyTypedVariableListContext(Context, State);
		EnterRule(_localctx, 162, RULE_assemblyTypedVariableList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1025; identifier();
			State = 1027;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__58) {
				{
				State = 1026; assemblyType();
				}
			}

			State = 1031;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 1029; Match(T__14);
				State = 1030; assemblyTypedVariableList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyTypeContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssemblyTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyTypeContext assemblyType() {
		AssemblyTypeContext _localctx = new AssemblyTypeContext(Context, State);
		EnterRule(_localctx, 164, RULE_assemblyType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1033; Match(T__58);
			State = 1034; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubAssemblyContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		public SubAssemblyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subAssembly; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterSubAssembly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitSubAssembly(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubAssembly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubAssemblyContext subAssembly() {
		SubAssemblyContext _localctx = new SubAssemblyContext(Context, State);
		EnterRule(_localctx, 166, RULE_subAssembly);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1036; Match(T__45);
			State = 1037; identifier();
			State = 1038; assemblyBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberLiteralContext : ParserRuleContext {
		public ITerminalNode DecimalNumber() { return GetToken(SolidityParser.DecimalNumber, 0); }
		public ITerminalNode HexNumber() { return GetToken(SolidityParser.HexNumber, 0); }
		public ITerminalNode NumberUnit() { return GetToken(SolidityParser.NumberUnit, 0); }
		public NumberLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralContext numberLiteral() {
		NumberLiteralContext _localctx = new NumberLiteralContext(Context, State);
		EnterRule(_localctx, 168, RULE_numberLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1040;
			_la = TokenStream.LA(1);
			if ( !(_la==DecimalNumber || _la==HexNumber) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1042;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				{
				State = 1041; Match(NumberUnit);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(SolidityParser.Identifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 170, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1044;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__39) | (1L << T__51))) != 0) || _la==Identifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexLiteralContext : ParserRuleContext {
		public ITerminalNode[] HexLiteralFragment() { return GetTokens(SolidityParser.HexLiteralFragment); }
		public ITerminalNode HexLiteralFragment(int i) {
			return GetToken(SolidityParser.HexLiteralFragment, i);
		}
		public HexLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterHexLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitHexLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HexLiteralContext hexLiteral() {
		HexLiteralContext _localctx = new HexLiteralContext(Context, State);
		EnterRule(_localctx, 172, RULE_hexLiteral);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1047;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1046; Match(HexLiteralFragment);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1049;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,120,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public ITerminalNode[] StringLiteralFragment() { return GetTokens(SolidityParser.StringLiteralFragment); }
		public ITerminalNode StringLiteralFragment(int i) {
			return GetToken(SolidityParser.StringLiteralFragment, i);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISolidityVisitor<TResult> typedVisitor = visitor as ISolidityVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 174, RULE_stringLiteral);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1052;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1051; Match(StringLiteralFragment);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1054;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,121,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 30: return typeName_sempred((TypeNameContext)_localctx, predIndex);
		case 56: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool typeName_sempred(TypeNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 14);
		case 2: return Precpred(Context, 13);
		case 3: return Precpred(Context, 12);
		case 4: return Precpred(Context, 11);
		case 5: return Precpred(Context, 10);
		case 6: return Precpred(Context, 9);
		case 7: return Precpred(Context, 8);
		case 8: return Precpred(Context, 7);
		case 9: return Precpred(Context, 6);
		case 10: return Precpred(Context, 5);
		case 11: return Precpred(Context, 4);
		case 12: return Precpred(Context, 3);
		case 13: return Precpred(Context, 2);
		case 14: return Precpred(Context, 28);
		case 15: return Precpred(Context, 26);
		case 16: return Precpred(Context, 25);
		case 17: return Precpred(Context, 24);
		case 18: return Precpred(Context, 23);
		case 19: return Precpred(Context, 22);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x82', '\x423', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\xB8', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', '\xBB', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\xC8', 
		'\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\xCC', '\n', '\x6', 
		'\x3', '\a', '\x5', '\a', '\xCF', '\n', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', '\xD9', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x5', '\t', '\xDF', '\n', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', '\xE3', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\a', '\t', '\xED', '\n', '\t', '\f', '\t', '\xE', '\t', '\xF0', '\v', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x5', '\t', '\xF7', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x5', '\n', '\xFC', '\n', '\n', '\x3', '\v', '\x5', '\v', '\xFF', '\n', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\a', '\v', '\x107', '\n', '\v', '\f', '\v', '\xE', '\v', 
		'\x10A', '\v', '\v', '\x5', '\v', '\x10C', '\n', '\v', '\x3', '\v', '\x3', 
		'\v', '\a', '\v', '\x110', '\n', '\v', '\f', '\v', '\xE', '\v', '\x113', 
		'\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x5', '\f', '\x11A', '\n', '\f', '\x3', '\f', '\x5', '\f', '\x11D', 
		'\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x126', '\n', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\a', '\xE', '\x12F', '\n', '\xE', '\f', '\xE', '\xE', 
		'\xE', '\x132', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\x137', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', 
		'\x140', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x143', '\v', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x147', '\n', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\x14E', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\x15A', '\n', '\x11', '\f', 
		'\x11', '\xE', '\x11', '\x15D', '\v', '\x11', '\x5', '\x11', '\x15F', 
		'\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x5', '\x12', '\x166', '\n', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\a', '\x12', '\x16A', '\n', '\x12', '\f', '\x12', '\xE', '\x12', 
		'\x16D', '\v', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x171', 
		'\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x5', '\x13', '\x177', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\x17B', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x5', '\x14', '\x181', '\n', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x5', '\x14', '\x186', '\n', '\x14', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\a', '\x16', '\x193', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\x196', 
		'\v', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', 
		'\x19B', '\n', '\x17', '\x3', '\x17', '\x5', '\x17', '\x19E', '\n', '\x17', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', 
		'\x1A4', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x1AC', '\n', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\a', '\x19', '\x1B0', '\n', '\x19', '\f', 
		'\x19', '\xE', '\x19', '\x1B3', '\v', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\a', '\x1B', '\x1BD', '\n', '\x1B', '\f', '\x1B', '\xE', 
		'\x1B', '\x1C0', '\v', '\x1B', '\x5', '\x1B', '\x1C2', '\n', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x1C8', 
		'\n', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x1CB', '\n', '\x1C', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\a', '\x1D', '\x1D1', 
		'\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', '\x1D4', '\v', '\x1D', '\x5', 
		'\x1D', '\x1D6', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', 
		'\x3', '\x1E', '\x5', '\x1E', '\x1DC', '\n', '\x1E', '\x3', '\x1E', '\x5', 
		'\x1E', '\x1DF', '\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', 
		'\x1E3', '\n', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x1EC', '\n', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x1F1', '\n', ' ', '\x3', 
		' ', '\a', ' ', '\x1F4', '\n', ' ', '\f', ' ', '\xE', ' ', '\x1F7', '\v', 
		' ', '\x3', '!', '\x3', '!', '\x3', '!', '\a', '!', '\x1FC', '\n', '!', 
		'\f', '!', '\xE', '!', '\x1FF', '\v', '!', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x5', '\"', '\x205', '\n', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x5', '#', '\x20F', '\n', '#', '\x3', '$', '\x3', '$', '\x3', '%', 
		'\x3', '%', '\x3', '&', '\x3', '&', '\a', '&', '\x217', '\n', '&', '\f', 
		'&', '\xE', '&', '\x21A', '\v', '&', '\x3', '&', '\x3', '&', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x5', '\'', '\x22B', '\n', '\'', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', 
		'\x3', ')', '\x3', ')', '\x5', ')', '\x237', '\n', ')', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x5', '*', '\x23C', '\n', '*', '\x3', '*', '\x3', '*', 
		'\x6', '*', '\x240', '\n', '*', '\r', '*', '\xE', '*', '\x241', '\x3', 
		'+', '\x3', '+', '\x5', '+', '\x246', '\n', '+', '\x3', '+', '\x5', '+', 
		'\x249', '\n', '+', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', '-', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\x5', '-', '\x257', '\n', '-', '\x3', '-', '\x3', '-', 
		'\x5', '-', '\x25B', '\n', '-', '\x3', '-', '\x5', '-', '\x25E', '\n', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', '.', '\x5', 
		'.', '\x265', '\n', '.', '\x3', '/', '\x3', '/', '\x5', '/', '\x269', 
		'\n', '/', '\x3', '/', '\x3', '/', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x27D', 
		'\n', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x5', '\x36', '\x28F', '\n', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x5', '\x36', '\x293', '\n', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x37', '\x5', '\x37', '\x298', '\n', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x5', '\x37', '\x29C', '\n', '\x37', '\a', '\x37', 
		'\x29E', '\n', '\x37', '\f', '\x37', '\xE', '\x37', '\x2A1', '\v', '\x37', 
		'\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x2A5', '\n', '\x38', '\x3', 
		'\x38', '\a', '\x38', '\x2A8', '\n', '\x38', '\f', '\x38', '\xE', '\x38', 
		'\x2AB', '\v', '\x38', '\x3', '\x38', '\x5', '\x38', '\x2AE', '\n', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', 
		'\x2B4', '\n', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x5', '\x39', '\x2BF', '\n', '\x39', '\x3', ':', '\x3', ':', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x5', ':', '\x2D8', '\n', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x5', ':', '\x309', 
		'\n', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x5', ':', 
		'\x30F', '\n', ':', '\x3', ':', '\x3', ':', '\x5', ':', '\x313', '\n', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\a', ':', '\x323', '\n', ':', '\f', ':', 
		'\xE', ':', '\x326', '\v', ':', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x5', ';', '\x32F', '\n', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x5', ';', 
		'\x336', '\n', ';', '\x5', ';', '\x338', '\n', ';', '\x3', '<', '\x3', 
		'<', '\x3', '<', '\a', '<', '\x33D', '\n', '<', '\f', '<', '\xE', '<', 
		'\x340', '\v', '<', '\x3', '=', '\x3', '=', '\x3', '=', '\a', '=', '\x345', 
		'\n', '=', '\f', '=', '\xE', '=', '\x348', '\v', '=', '\x3', '=', '\x5', 
		'=', '\x34B', '\n', '=', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', 
		'\x3', '?', '\x3', '?', '\x5', '?', '\x353', '\n', '?', '\x3', '?', '\x3', 
		'?', '\x5', '?', '\x357', '\n', '?', '\x5', '?', '\x359', '\n', '?', '\x3', 
		'@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '\x41', '\x3', 
		'\x41', '\x5', '\x41', '\x362', '\n', '\x41', '\x3', '\x41', '\x3', '\x41', 
		'\x5', '\x41', '\x366', '\n', '\x41', '\a', '\x41', '\x368', '\n', '\x41', 
		'\f', '\x41', '\xE', '\x41', '\x36B', '\v', '\x41', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\a', '\x41', '\x372', 
		'\n', '\x41', '\f', '\x41', '\xE', '\x41', '\x375', '\v', '\x41', '\x5', 
		'\x41', '\x377', '\n', '\x41', '\x3', '\x41', '\x5', '\x41', '\x37A', 
		'\n', '\x41', '\x3', '\x42', '\x3', '\x42', '\x5', '\x42', '\x37E', '\n', 
		'\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x5', '\x43', '\x392', 
		'\n', '\x43', '\x3', '\x44', '\x3', '\x44', '\a', '\x44', '\x396', '\n', 
		'\x44', '\f', '\x44', '\xE', '\x44', '\x399', '\v', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\x39F', '\n', 
		'\x45', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x5', 
		'\x46', '\x3A5', '\n', '\x46', '\x3', '\x46', '\x3', '\x46', '\x5', '\x46', 
		'\x3A9', '\n', '\x46', '\x3', '\x46', '\x3', '\x46', '\a', '\x46', '\x3AD', 
		'\n', '\x46', '\f', '\x46', '\xE', '\x46', '\x3B0', '\v', '\x46', '\x3', 
		'\x46', '\x5', '\x46', '\x3B3', '\n', '\x46', '\x3', 'G', '\x3', 'G', 
		'\x3', 'G', '\x3', 'G', '\x5', 'G', '\x3B9', '\n', 'G', '\x3', 'H', '\x3', 
		'H', '\x3', 'H', '\x3', 'H', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\a', 
		'I', '\x3C2', '\n', 'I', '\f', 'I', '\xE', 'I', '\x3C5', '\v', 'I', '\x3', 
		'J', '\x3', 'J', '\x3', 'J', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 
		'L', '\x3', 'L', '\x3', 'L', '\a', 'L', '\x3D0', '\n', 'L', '\f', 'L', 
		'\xE', 'L', '\x3D3', '\v', 'L', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x5', 
		'M', '\x3D8', '\n', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', 
		'\x5', 'M', '\x3DE', '\n', 'M', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 
		'N', '\x5', 'N', '\x3E4', '\n', 'N', '\x3', 'N', '\x3', 'N', '\x5', 'N', 
		'\x3E8', '\n', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'O', '\x3', 'O', '\x3', 
		'O', '\x3', 'O', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x3', 
		'P', '\x3', 'P', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x5', 'R', '\x3FF', 
		'\n', 'R', '\x3', 'R', '\x5', 'R', '\x402', '\n', 'R', '\x3', 'S', '\x3', 
		'S', '\x5', 'S', '\x406', '\n', 'S', '\x3', 'S', '\x3', 'S', '\x5', 'S', 
		'\x40A', '\n', 'S', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'V', '\x3', 'V', '\x5', 'V', '\x415', 
		'\n', 'V', '\x3', 'W', '\x3', 'W', '\x3', 'X', '\x6', 'X', '\x41A', '\n', 
		'X', '\r', 'X', '\xE', 'X', '\x41B', '\x3', 'Y', '\x6', 'Y', '\x41F', 
		'\n', 'Y', '\r', 'Y', '\xE', 'Y', '\x420', '\x3', 'Y', '\x2', '\x4', '>', 
		'r', 'Z', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', 
		'@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 
		'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 
		'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', '\x86', '\x88', 
		'\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', '\x98', '\x9A', 
		'\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', '\xA8', '\xAA', '\xAC', 
		'\xAE', '\xB0', '\x2', '\x10', '\x3', '\x2', '\x5', '\v', '\x3', '\x2', 
		'\x14', '\x16', '\x3', '\x2', '(', '*', '\x6', '\x2', 'l', 'l', 's', 's', 
		'w', 'w', 'y', 'y', '\x3', '\x2', ':', ';', '\x3', '\x2', '>', '?', '\x3', 
		'\x2', '@', '\x41', '\x4', '\x2', '\xE', '\xE', '\x44', '\x45', '\x3', 
		'\x2', '\x46', 'G', '\x3', '\x2', '\a', '\n', '\x3', '\x2', 'J', 'K', 
		'\x4', '\x2', '\v', '\v', 'O', 'X', '\x3', '\x2', '\x65', '\x66', '\x6', 
		'\x2', '\xF', '\xF', '*', '*', '\x36', '\x36', '}', '}', '\x2', '\x4A4', 
		'\x2', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x4', '\xBE', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '\xC3', '\x3', '\x2', '\x2', '\x2', '\b', '\xC7', 
		'\x3', '\x2', '\x2', '\x2', '\n', '\xC9', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xE', '\xD2', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\xF6', '\x3', '\x2', '\x2', '\x2', '\x12', '\xF8', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\xFE', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x116', '\x3', '\x2', '\x2', '\x2', '\x18', '\x125', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x127', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x13A', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\x148', '\x3', '\x2', '\x2', '\x2', 
		' ', '\x151', '\x3', '\x2', '\x2', '\x2', '\"', '\x162', '\x3', '\x2', 
		'\x2', '\x2', '$', '\x172', '\x3', '\x2', '\x2', '\x2', '&', '\x185', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x187', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x194', '\x3', '\x2', '\x2', '\x2', ',', '\x197', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x19F', '\x3', '\x2', '\x2', '\x2', '\x30', '\x1A7', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x1B6', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x1B8', '\x3', '\x2', '\x2', '\x2', '\x36', '\x1C5', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x1CC', '\x3', '\x2', '\x2', '\x2', ':', '\x1D9', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x1E0', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x1EB', '\x3', '\x2', '\x2', '\x2', '@', '\x1F8', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x200', '\x3', '\x2', '\x2', '\x2', '\x44', '\x20A', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x210', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x212', '\x3', '\x2', '\x2', '\x2', 'J', '\x214', '\x3', '\x2', 
		'\x2', '\x2', 'L', '\x22A', '\x3', '\x2', '\x2', '\x2', 'N', '\x22C', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x22F', '\x3', '\x2', '\x2', '\x2', 
		'R', '\x238', '\x3', '\x2', '\x2', '\x2', 'T', '\x243', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\x24C', '\x3', '\x2', '\x2', '\x2', 'X', '\x252', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '\x264', '\x3', '\x2', '\x2', '\x2', 
		'\\', '\x266', '\x3', '\x2', '\x2', '\x2', '^', '\x26C', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x274', '\x3', '\x2', '\x2', '\x2', '\x62', '\x277', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x27A', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x280', '\x3', '\x2', '\x2', '\x2', 'h', '\x283', '\x3', '\x2', 
		'\x2', '\x2', 'j', '\x28E', '\x3', '\x2', '\x2', '\x2', 'l', '\x297', 
		'\x3', '\x2', '\x2', '\x2', 'n', '\x2A2', '\x3', '\x2', '\x2', '\x2', 
		'p', '\x2BE', '\x3', '\x2', '\x2', '\x2', 'r', '\x2D7', '\x3', '\x2', 
		'\x2', '\x2', 't', '\x337', '\x3', '\x2', '\x2', '\x2', 'v', '\x339', 
		'\x3', '\x2', '\x2', '\x2', 'x', '\x341', '\x3', '\x2', '\x2', '\x2', 
		'z', '\x34C', '\x3', '\x2', '\x2', '\x2', '|', '\x358', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x35A', '\x3', '\x2', '\x2', '\x2', '\x80', '\x379', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\x37D', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x391', '\x3', '\x2', '\x2', '\x2', '\x86', '\x393', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x39E', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x3A4', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x3B4', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\x3BA', '\x3', '\x2', '\x2', '\x2', '\x90', '\x3BE', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x3C6', '\x3', '\x2', '\x2', '\x2', '\x94', '\x3C9', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x3CC', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x3DD', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x3DF', '\x3', '\x2', 
		'\x2', '\x2', '\x9C', '\x3EB', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x3EF', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\x3F5', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\x3FE', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x403', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '\x40B', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x40E', 
		'\x3', '\x2', '\x2', '\x2', '\xAA', '\x412', '\x3', '\x2', '\x2', '\x2', 
		'\xAC', '\x416', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x419', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\x41E', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB8', 
		'\x5', '\x4', '\x3', '\x2', '\xB3', '\xB8', '\x5', '\x10', '\t', '\x2', 
		'\xB4', '\xB8', '\x5', ' ', '\x11', '\x2', '\xB5', '\xB8', '\x5', '\x30', 
		'\x19', '\x2', '\xB6', '\xB8', '\x5', '\x14', '\v', '\x2', '\xB7', '\xB2', 
		'\x3', '\x2', '\x2', '\x2', '\xB7', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		'\xB7', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB5', '\x3', '\x2', 
		'\x2', '\x2', '\xB7', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xBB', 
		'\x3', '\x2', '\x2', '\x2', '\xB9', '\xB7', '\x3', '\x2', '\x2', '\x2', 
		'\xB9', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBC', '\x3', '\x2', 
		'\x2', '\x2', '\xBB', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', 
		'\a', '\x2', '\x2', '\x3', '\xBD', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\xBE', '\xBF', '\a', '\x3', '\x2', '\x2', '\xBF', '\xC0', '\x5', '\x6', 
		'\x4', '\x2', '\xC0', '\xC1', '\x5', '\b', '\x5', '\x2', '\xC1', '\xC2', 
		'\a', '\x4', '\x2', '\x2', '\xC2', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\xC3', '\xC4', '\x5', '\xAC', 'W', '\x2', '\xC4', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\xC5', '\xC8', '\x5', '\n', '\x6', '\x2', '\xC6', '\xC8', 
		'\x5', 'r', ':', '\x2', '\xC7', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC7', 
		'\xC6', '\x3', '\x2', '\x2', '\x2', '\xC8', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\xC9', '\xCB', '\x5', '\f', '\a', '\x2', '\xCA', '\xCC', '\x5', 
		'\f', '\a', '\x2', '\xCB', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCB', 
		'\xCC', '\x3', '\x2', '\x2', '\x2', '\xCC', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\xCD', '\xCF', '\x5', '\xE', '\b', '\x2', '\xCE', '\xCD', '\x3', 
		'\x2', '\x2', '\x2', '\xCE', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xCF', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', '\a', '\x7F', '\x2', 
		'\x2', '\xD1', '\r', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\t', 
		'\x2', '\x2', '\x2', '\xD3', '\xF', '\x3', '\x2', '\x2', '\x2', '\xD4', 
		'\xD5', '\a', '\f', '\x2', '\x2', '\xD5', '\xD8', '\a', '~', '\x2', '\x2', 
		'\xD6', '\xD7', '\a', '\r', '\x2', '\x2', '\xD7', '\xD9', '\x5', '\xAC', 
		'W', '\x2', '\xD8', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', 
		'\x3', '\x2', '\x2', '\x2', '\xD9', '\xDA', '\x3', '\x2', '\x2', '\x2', 
		'\xDA', '\xF7', '\a', '\x4', '\x2', '\x2', '\xDB', '\xDE', '\a', '\f', 
		'\x2', '\x2', '\xDC', '\xDF', '\a', '\xE', '\x2', '\x2', '\xDD', '\xDF', 
		'\x5', '\xAC', 'W', '\x2', '\xDE', '\xDC', '\x3', '\x2', '\x2', '\x2', 
		'\xDE', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE2', '\x3', '\x2', 
		'\x2', '\x2', '\xE0', '\xE1', '\a', '\r', '\x2', '\x2', '\xE1', '\xE3', 
		'\x5', '\xAC', 'W', '\x2', '\xE2', '\xE0', '\x3', '\x2', '\x2', '\x2', 
		'\xE2', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\x3', '\x2', 
		'\x2', '\x2', '\xE4', '\xE5', '\a', '\xF', '\x2', '\x2', '\xE5', '\xE6', 
		'\a', '~', '\x2', '\x2', '\xE6', '\xF7', '\a', '\x4', '\x2', '\x2', '\xE7', 
		'\xE8', '\a', '\f', '\x2', '\x2', '\xE8', '\xE9', '\a', '\x10', '\x2', 
		'\x2', '\xE9', '\xEE', '\x5', '\x12', '\n', '\x2', '\xEA', '\xEB', '\a', 
		'\x11', '\x2', '\x2', '\xEB', '\xED', '\x5', '\x12', '\n', '\x2', '\xEC', 
		'\xEA', '\x3', '\x2', '\x2', '\x2', '\xED', '\xF0', '\x3', '\x2', '\x2', 
		'\x2', '\xEE', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', '\x3', 
		'\x2', '\x2', '\x2', '\xEF', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF0', 
		'\xEE', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF2', '\a', '\x12', '\x2', 
		'\x2', '\xF2', '\xF3', '\a', '\xF', '\x2', '\x2', '\xF3', '\xF4', '\a', 
		'~', '\x2', '\x2', '\xF4', '\xF5', '\a', '\x4', '\x2', '\x2', '\xF5', 
		'\xF7', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xD4', '\x3', '\x2', '\x2', 
		'\x2', '\xF6', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\xF7', '\x11', '\x3', '\x2', '\x2', '\x2', '\xF8', 
		'\xFB', '\x5', '\xAC', 'W', '\x2', '\xF9', '\xFA', '\a', '\r', '\x2', 
		'\x2', '\xFA', '\xFC', '\x5', '\xAC', 'W', '\x2', '\xFB', '\xF9', '\x3', 
		'\x2', '\x2', '\x2', '\xFB', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFC', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFF', '\a', '\x13', '\x2', 
		'\x2', '\xFE', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\x3', 
		'\x2', '\x2', '\x2', '\xFF', '\x100', '\x3', '\x2', '\x2', '\x2', '\x100', 
		'\x101', '\t', '\x3', '\x2', '\x2', '\x101', '\x10B', '\x5', '\xAC', 'W', 
		'\x2', '\x102', '\x103', '\a', '\x17', '\x2', '\x2', '\x103', '\x108', 
		'\x5', '\x16', '\f', '\x2', '\x104', '\x105', '\a', '\x11', '\x2', '\x2', 
		'\x105', '\x107', '\x5', '\x16', '\f', '\x2', '\x106', '\x104', '\x3', 
		'\x2', '\x2', '\x2', '\x107', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\x106', '\x3', '\x2', '\x2', '\x2', '\x108', '\x109', '\x3', '\x2', '\x2', 
		'\x2', '\x109', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x108', 
		'\x3', '\x2', '\x2', '\x2', '\x10B', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'\x10B', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10D', '\x3', 
		'\x2', '\x2', '\x2', '\x10D', '\x111', '\a', '\x10', '\x2', '\x2', '\x10E', 
		'\x110', '\x5', '\x18', '\r', '\x2', '\x10F', '\x10E', '\x3', '\x2', '\x2', 
		'\x2', '\x110', '\x113', '\x3', '\x2', '\x2', '\x2', '\x111', '\x10F', 
		'\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\x3', '\x2', '\x2', '\x2', 
		'\x112', '\x114', '\x3', '\x2', '\x2', '\x2', '\x113', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '\x114', '\x115', '\a', '\x12', '\x2', '\x2', '\x115', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x116', '\x11C', '\x5', '@', '!', 
		'\x2', '\x117', '\x119', '\a', '\x18', '\x2', '\x2', '\x118', '\x11A', 
		'\x5', 'v', '<', '\x2', '\x119', '\x118', '\x3', '\x2', '\x2', '\x2', 
		'\x119', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', '\x3', 
		'\x2', '\x2', '\x2', '\x11B', '\x11D', '\a', '\x19', '\x2', '\x2', '\x11C', 
		'\x117', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11D', '\x3', '\x2', '\x2', 
		'\x2', '\x11D', '\x17', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x126', 
		'\x5', '\x1A', '\xE', '\x2', '\x11F', '\x126', '\x5', '\x1E', '\x10', 
		'\x2', '\x120', '\x126', '\x5', ' ', '\x11', '\x2', '\x121', '\x126', 
		'\x5', '\"', '\x12', '\x2', '\x122', '\x126', '\x5', '$', '\x13', '\x2', 
		'\x123', '\x126', '\x5', '.', '\x18', '\x2', '\x124', '\x126', '\x5', 
		'\x30', '\x19', '\x2', '\x125', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x125', 
		'\x11F', '\x3', '\x2', '\x2', '\x2', '\x125', '\x120', '\x3', '\x2', '\x2', 
		'\x2', '\x125', '\x121', '\x3', '\x2', '\x2', '\x2', '\x125', '\x122', 
		'\x3', '\x2', '\x2', '\x2', '\x125', '\x123', '\x3', '\x2', '\x2', '\x2', 
		'\x125', '\x124', '\x3', '\x2', '\x2', '\x2', '\x126', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x127', '\x130', '\x5', '>', ' ', '\x2', '\x128', 
		'\x12F', '\a', 'u', '\x2', '\x2', '\x129', '\x12F', '\a', 'r', '\x2', 
		'\x2', '\x12A', '\x12F', '\a', 't', '\x2', '\x2', '\x12B', '\x12F', '\a', 
		'l', '\x2', '\x2', '\x12C', '\x12F', '\a', 'm', '\x2', '\x2', '\x12D', 
		'\x12F', '\x5', '\x1C', '\xF', '\x2', '\x12E', '\x128', '\x3', '\x2', 
		'\x2', '\x2', '\x12E', '\x129', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x12A', 
		'\x3', '\x2', '\x2', '\x2', '\x12E', '\x12B', '\x3', '\x2', '\x2', '\x2', 
		'\x12E', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x12D', '\x3', 
		'\x2', '\x2', '\x2', '\x12F', '\x132', '\x3', '\x2', '\x2', '\x2', '\x130', 
		'\x12E', '\x3', '\x2', '\x2', '\x2', '\x130', '\x131', '\x3', '\x2', '\x2', 
		'\x2', '\x131', '\x133', '\x3', '\x2', '\x2', '\x2', '\x132', '\x130', 
		'\x3', '\x2', '\x2', '\x2', '\x133', '\x136', '\x5', '\xAC', 'W', '\x2', 
		'\x134', '\x135', '\a', '\v', '\x2', '\x2', '\x135', '\x137', '\x5', 'r', 
		':', '\x2', '\x136', '\x134', '\x3', '\x2', '\x2', '\x2', '\x136', '\x137', 
		'\x3', '\x2', '\x2', '\x2', '\x137', '\x138', '\x3', '\x2', '\x2', '\x2', 
		'\x138', '\x139', '\a', '\x4', '\x2', '\x2', '\x139', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\x13A', '\x146', '\a', '\x1A', '\x2', '\x2', '\x13B', '\x13C', 
		'\a', '\x18', '\x2', '\x2', '\x13C', '\x141', '\x5', '@', '!', '\x2', 
		'\x13D', '\x13E', '\a', '\x11', '\x2', '\x2', '\x13E', '\x140', '\x5', 
		'@', '!', '\x2', '\x13F', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x140', 
		'\x143', '\x3', '\x2', '\x2', '\x2', '\x141', '\x13F', '\x3', '\x2', '\x2', 
		'\x2', '\x141', '\x142', '\x3', '\x2', '\x2', '\x2', '\x142', '\x144', 
		'\x3', '\x2', '\x2', '\x2', '\x143', '\x141', '\x3', '\x2', '\x2', '\x2', 
		'\x144', '\x145', '\a', '\x19', '\x2', '\x2', '\x145', '\x147', '\x3', 
		'\x2', '\x2', '\x2', '\x146', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x146', 
		'\x147', '\x3', '\x2', '\x2', '\x2', '\x147', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x148', '\x149', '\a', '\x1B', '\x2', '\x2', '\x149', '\x14A', 
		'\x5', '\xAC', 'W', '\x2', '\x14A', '\x14D', '\a', '\x1C', '\x2', '\x2', 
		'\x14B', '\x14E', '\a', '\xE', '\x2', '\x2', '\x14C', '\x14E', '\x5', 
		'>', ' ', '\x2', '\x14D', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14D', 
		'\x14C', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x14F', '\x3', '\x2', '\x2', 
		'\x2', '\x14F', '\x150', '\a', '\x4', '\x2', '\x2', '\x150', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x151', '\x152', '\a', '\x1D', '\x2', '\x2', '\x152', 
		'\x153', '\x5', '\xAC', 'W', '\x2', '\x153', '\x15E', '\a', '\x10', '\x2', 
		'\x2', '\x154', '\x155', '\x5', '<', '\x1F', '\x2', '\x155', '\x15B', 
		'\a', '\x4', '\x2', '\x2', '\x156', '\x157', '\x5', '<', '\x1F', '\x2', 
		'\x157', '\x158', '\a', '\x4', '\x2', '\x2', '\x158', '\x15A', '\x3', 
		'\x2', '\x2', '\x2', '\x159', '\x156', '\x3', '\x2', '\x2', '\x2', '\x15A', 
		'\x15D', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x159', '\x3', '\x2', '\x2', 
		'\x2', '\x15B', '\x15C', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x15F', 
		'\x3', '\x2', '\x2', '\x2', '\x15D', '\x15B', '\x3', '\x2', '\x2', '\x2', 
		'\x15E', '\x154', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x15F', '\x3', 
		'\x2', '\x2', '\x2', '\x15F', '\x160', '\x3', '\x2', '\x2', '\x2', '\x160', 
		'\x161', '\a', '\x12', '\x2', '\x2', '\x161', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x162', '\x163', '\a', '\x1E', '\x2', '\x2', '\x163', '\x165', 
		'\x5', '\xAC', 'W', '\x2', '\x164', '\x166', '\x5', '\x34', '\x1B', '\x2', 
		'\x165', '\x164', '\x3', '\x2', '\x2', '\x2', '\x165', '\x166', '\x3', 
		'\x2', '\x2', '\x2', '\x166', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x167', 
		'\x16A', '\a', 'v', '\x2', '\x2', '\x168', '\x16A', '\x5', '\x1C', '\xF', 
		'\x2', '\x169', '\x167', '\x3', '\x2', '\x2', '\x2', '\x169', '\x168', 
		'\x3', '\x2', '\x2', '\x2', '\x16A', '\x16D', '\x3', '\x2', '\x2', '\x2', 
		'\x16B', '\x169', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x16C', '\x3', 
		'\x2', '\x2', '\x2', '\x16C', '\x170', '\x3', '\x2', '\x2', '\x2', '\x16D', 
		'\x16B', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x171', '\a', '\x4', '\x2', 
		'\x2', '\x16F', '\x171', '\x5', 'J', '&', '\x2', '\x170', '\x16E', '\x3', 
		'\x2', '\x2', '\x2', '\x170', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x171', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x172', '\x173', '\x5', '&', '\x14', 
		'\x2', '\x173', '\x174', '\x5', '\x34', '\x1B', '\x2', '\x174', '\x176', 
		'\x5', '*', '\x16', '\x2', '\x175', '\x177', '\x5', '(', '\x15', '\x2', 
		'\x176', '\x175', '\x3', '\x2', '\x2', '\x2', '\x176', '\x177', '\x3', 
		'\x2', '\x2', '\x2', '\x177', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x178', 
		'\x17B', '\a', '\x4', '\x2', '\x2', '\x179', '\x17B', '\x5', 'J', '&', 
		'\x2', '\x17A', '\x178', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x179', 
		'\x3', '\x2', '\x2', '\x2', '\x17B', '%', '\x3', '\x2', '\x2', '\x2', 
		'\x17C', '\x180', '\a', '\x1F', '\x2', '\x2', '\x17D', '\x181', '\x5', 
		'\xAC', 'W', '\x2', '\x17E', '\x181', '\a', '|', '\x2', '\x2', '\x17F', 
		'\x181', '\a', '{', '\x2', '\x2', '\x180', '\x17D', '\x3', '\x2', '\x2', 
		'\x2', '\x180', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x180', '\x17F', 
		'\x3', '\x2', '\x2', '\x2', '\x180', '\x181', '\x3', '\x2', '\x2', '\x2', 
		'\x181', '\x186', '\x3', '\x2', '\x2', '\x2', '\x182', '\x186', '\a', 
		'z', '\x2', '\x2', '\x183', '\x186', '\a', '{', '\x2', '\x2', '\x184', 
		'\x186', '\a', '|', '\x2', '\x2', '\x185', '\x17C', '\x3', '\x2', '\x2', 
		'\x2', '\x185', '\x182', '\x3', '\x2', '\x2', '\x2', '\x185', '\x183', 
		'\x3', '\x2', '\x2', '\x2', '\x185', '\x184', '\x3', '\x2', '\x2', '\x2', 
		'\x186', '\'', '\x3', '\x2', '\x2', '\x2', '\x187', '\x188', '\a', ' ', 
		'\x2', '\x2', '\x188', '\x189', '\x5', '\x34', '\x1B', '\x2', '\x189', 
		')', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x193', '\x5', ',', '\x17', 
		'\x2', '\x18B', '\x193', '\x5', 'H', '%', '\x2', '\x18C', '\x193', '\a', 
		'p', '\x2', '\x2', '\x18D', '\x193', '\a', 'u', '\x2', '\x2', '\x18E', 
		'\x193', '\a', 'r', '\x2', '\x2', '\x18F', '\x193', '\a', 't', '\x2', 
		'\x2', '\x190', '\x193', '\a', 'v', '\x2', '\x2', '\x191', '\x193', '\x5', 
		'\x1C', '\xF', '\x2', '\x192', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x192', 
		'\x18B', '\x3', '\x2', '\x2', '\x2', '\x192', '\x18C', '\x3', '\x2', '\x2', 
		'\x2', '\x192', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x192', '\x18E', 
		'\x3', '\x2', '\x2', '\x2', '\x192', '\x18F', '\x3', '\x2', '\x2', '\x2', 
		'\x192', '\x190', '\x3', '\x2', '\x2', '\x2', '\x192', '\x191', '\x3', 
		'\x2', '\x2', '\x2', '\x193', '\x196', '\x3', '\x2', '\x2', '\x2', '\x194', 
		'\x192', '\x3', '\x2', '\x2', '\x2', '\x194', '\x195', '\x3', '\x2', '\x2', 
		'\x2', '\x195', '+', '\x3', '\x2', '\x2', '\x2', '\x196', '\x194', '\x3', 
		'\x2', '\x2', '\x2', '\x197', '\x19D', '\x5', '\xAC', 'W', '\x2', '\x198', 
		'\x19A', '\a', '\x18', '\x2', '\x2', '\x199', '\x19B', '\x5', 'v', '<', 
		'\x2', '\x19A', '\x199', '\x3', '\x2', '\x2', '\x2', '\x19A', '\x19B', 
		'\x3', '\x2', '\x2', '\x2', '\x19B', '\x19C', '\x3', '\x2', '\x2', '\x2', 
		'\x19C', '\x19E', '\a', '\x19', '\x2', '\x2', '\x19D', '\x198', '\x3', 
		'\x2', '\x2', '\x2', '\x19D', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x19E', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x1A0', '\a', '!', '\x2', '\x2', 
		'\x1A0', '\x1A1', '\x5', '\xAC', 'W', '\x2', '\x1A1', '\x1A3', '\x5', 
		'\x38', '\x1D', '\x2', '\x1A2', '\x1A4', '\a', 'j', '\x2', '\x2', '\x1A3', 
		'\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A4', '\x3', '\x2', '\x2', 
		'\x2', '\x1A4', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A6', 
		'\a', '\x4', '\x2', '\x2', '\x1A6', '/', '\x3', '\x2', '\x2', '\x2', '\x1A7', 
		'\x1A8', '\a', '\"', '\x2', '\x2', '\x1A8', '\x1A9', '\x5', '\xAC', 'W', 
		'\x2', '\x1A9', '\x1AB', '\a', '\x10', '\x2', '\x2', '\x1AA', '\x1AC', 
		'\x5', '\x32', '\x1A', '\x2', '\x1AB', '\x1AA', '\x3', '\x2', '\x2', '\x2', 
		'\x1AB', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1B1', '\x3', 
		'\x2', '\x2', '\x2', '\x1AD', '\x1AE', '\a', '\x11', '\x2', '\x2', '\x1AE', 
		'\x1B0', '\x5', '\x32', '\x1A', '\x2', '\x1AF', '\x1AD', '\x3', '\x2', 
		'\x2', '\x2', '\x1B0', '\x1B3', '\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1AF', 
		'\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1B2', '\x3', '\x2', '\x2', '\x2', 
		'\x1B2', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B1', '\x3', 
		'\x2', '\x2', '\x2', '\x1B4', '\x1B5', '\a', '\x12', '\x2', '\x2', '\x1B5', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B7', '\x5', '\xAC', 'W', 
		'\x2', '\x1B7', '\x33', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1C1', 
		'\a', '\x18', '\x2', '\x2', '\x1B9', '\x1BE', '\x5', '\x36', '\x1C', '\x2', 
		'\x1BA', '\x1BB', '\a', '\x11', '\x2', '\x2', '\x1BB', '\x1BD', '\x5', 
		'\x36', '\x1C', '\x2', '\x1BC', '\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1BD', 
		'\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1BC', '\x3', '\x2', '\x2', 
		'\x2', '\x1BE', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1C2', 
		'\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1BE', '\x3', '\x2', '\x2', '\x2', 
		'\x1C1', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C2', '\x3', 
		'\x2', '\x2', '\x2', '\x1C2', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1C3', 
		'\x1C4', '\a', '\x19', '\x2', '\x2', '\x1C4', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x1C5', '\x1C7', '\x5', '>', ' ', '\x2', '\x1C6', '\x1C8', '\x5', 
		'\x46', '$', '\x2', '\x1C7', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1C7', 
		'\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1CA', '\x3', '\x2', '\x2', 
		'\x2', '\x1C9', '\x1CB', '\x5', '\xAC', 'W', '\x2', '\x1CA', '\x1C9', 
		'\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1CB', '\x3', '\x2', '\x2', '\x2', 
		'\x1CB', '\x37', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1D5', '\a', '\x18', 
		'\x2', '\x2', '\x1CD', '\x1D2', '\x5', ':', '\x1E', '\x2', '\x1CE', '\x1CF', 
		'\a', '\x11', '\x2', '\x2', '\x1CF', '\x1D1', '\x5', ':', '\x1E', '\x2', 
		'\x1D0', '\x1CE', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1D4', '\x3', 
		'\x2', '\x2', '\x2', '\x1D2', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1D2', 
		'\x1D3', '\x3', '\x2', '\x2', '\x2', '\x1D3', '\x1D6', '\x3', '\x2', '\x2', 
		'\x2', '\x1D4', '\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1CD', 
		'\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1D6', '\x3', '\x2', '\x2', '\x2', 
		'\x1D6', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1D8', '\a', 
		'\x19', '\x2', '\x2', '\x1D8', '\x39', '\x3', '\x2', '\x2', '\x2', '\x1D9', 
		'\x1DB', '\x5', '>', ' ', '\x2', '\x1DA', '\x1DC', '\a', 'q', '\x2', '\x2', 
		'\x1DB', '\x1DA', '\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1DC', '\x3', 
		'\x2', '\x2', '\x2', '\x1DC', '\x1DE', '\x3', '\x2', '\x2', '\x2', '\x1DD', 
		'\x1DF', '\x5', '\xAC', 'W', '\x2', '\x1DE', '\x1DD', '\x3', '\x2', '\x2', 
		'\x2', '\x1DE', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x1DF', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x1E0', '\x1E2', '\x5', '>', ' ', '\x2', '\x1E1', 
		'\x1E3', '\x5', '\x46', '$', '\x2', '\x1E2', '\x1E1', '\x3', '\x2', '\x2', 
		'\x2', '\x1E2', '\x1E3', '\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E4', 
		'\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1E5', '\x5', '\xAC', 'W', '\x2', 
		'\x1E5', '=', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E7', '\b', ' ', 
		'\x1', '\x2', '\x1E7', '\x1EC', '\x5', 'p', '\x39', '\x2', '\x1E8', '\x1EC', 
		'\x5', '@', '!', '\x2', '\x1E9', '\x1EC', '\x5', '\x42', '\"', '\x2', 
		'\x1EA', '\x1EC', '\x5', '\x44', '#', '\x2', '\x1EB', '\x1E6', '\x3', 
		'\x2', '\x2', '\x2', '\x1EB', '\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1EB', 
		'\x1E9', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1EA', '\x3', '\x2', '\x2', 
		'\x2', '\x1EC', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x1ED', '\x1EE', 
		'\f', '\x4', '\x2', '\x2', '\x1EE', '\x1F0', '\a', '#', '\x2', '\x2', 
		'\x1EF', '\x1F1', '\x5', 'r', ':', '\x2', '\x1F0', '\x1EF', '\x3', '\x2', 
		'\x2', '\x2', '\x1F0', '\x1F1', '\x3', '\x2', '\x2', '\x2', '\x1F1', '\x1F2', 
		'\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F4', '\a', '$', '\x2', '\x2', 
		'\x1F3', '\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1F4', '\x1F7', '\x3', 
		'\x2', '\x2', '\x2', '\x1F5', '\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1F5', 
		'\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1F6', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x1F7', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1FD', 
		'\x5', '\xAC', 'W', '\x2', '\x1F9', '\x1FA', '\a', '%', '\x2', '\x2', 
		'\x1FA', '\x1FC', '\x5', '\xAC', 'W', '\x2', '\x1FB', '\x1F9', '\x3', 
		'\x2', '\x2', '\x2', '\x1FC', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1FD', 
		'\x1FB', '\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1FE', '\x3', '\x2', '\x2', 
		'\x2', '\x1FE', '\x41', '\x3', '\x2', '\x2', '\x2', '\x1FF', '\x1FD', 
		'\x3', '\x2', '\x2', '\x2', '\x200', '\x201', '\a', '&', '\x2', '\x2', 
		'\x201', '\x204', '\a', '\x18', '\x2', '\x2', '\x202', '\x205', '\x5', 
		'p', '\x39', '\x2', '\x203', '\x205', '\x5', '@', '!', '\x2', '\x204', 
		'\x202', '\x3', '\x2', '\x2', '\x2', '\x204', '\x203', '\x3', '\x2', '\x2', 
		'\x2', '\x205', '\x206', '\x3', '\x2', '\x2', '\x2', '\x206', '\x207', 
		'\a', '\'', '\x2', '\x2', '\x207', '\x208', '\x5', '>', ' ', '\x2', '\x208', 
		'\x209', '\a', '\x19', '\x2', '\x2', '\x209', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x20A', '\x20B', '\a', '\x1F', '\x2', '\x2', '\x20B', '\x20C', 
		'\x5', '\x34', '\x1B', '\x2', '\x20C', '\x20E', '\x5', '*', '\x16', '\x2', 
		'\x20D', '\x20F', '\x5', '(', '\x15', '\x2', '\x20E', '\x20D', '\x3', 
		'\x2', '\x2', '\x2', '\x20E', '\x20F', '\x3', '\x2', '\x2', '\x2', '\x20F', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x210', '\x211', '\t', '\x4', '\x2', 
		'\x2', '\x211', 'G', '\x3', '\x2', '\x2', '\x2', '\x212', '\x213', '\t', 
		'\x5', '\x2', '\x2', '\x213', 'I', '\x3', '\x2', '\x2', '\x2', '\x214', 
		'\x218', '\a', '\x10', '\x2', '\x2', '\x215', '\x217', '\x5', 'L', '\'', 
		'\x2', '\x216', '\x215', '\x3', '\x2', '\x2', '\x2', '\x217', '\x21A', 
		'\x3', '\x2', '\x2', '\x2', '\x218', '\x216', '\x3', '\x2', '\x2', '\x2', 
		'\x218', '\x219', '\x3', '\x2', '\x2', '\x2', '\x219', '\x21B', '\x3', 
		'\x2', '\x2', '\x2', '\x21A', '\x218', '\x3', '\x2', '\x2', '\x2', '\x21B', 
		'\x21C', '\a', '\x12', '\x2', '\x2', '\x21C', 'K', '\x3', '\x2', '\x2', 
		'\x2', '\x21D', '\x22B', '\x5', 'P', ')', '\x2', '\x21E', '\x22B', '\x5', 
		'R', '*', '\x2', '\x21F', '\x22B', '\x5', 'V', ',', '\x2', '\x220', '\x22B', 
		'\x5', 'X', '-', '\x2', '\x221', '\x22B', '\x5', 'J', '&', '\x2', '\x222', 
		'\x22B', '\x5', '\\', '/', '\x2', '\x223', '\x22B', '\x5', '^', '\x30', 
		'\x2', '\x224', '\x22B', '\x5', '`', '\x31', '\x2', '\x225', '\x22B', 
		'\x5', '\x62', '\x32', '\x2', '\x226', '\x22B', '\x5', '\x64', '\x33', 
		'\x2', '\x227', '\x22B', '\x5', '\x66', '\x34', '\x2', '\x228', '\x22B', 
		'\x5', 'h', '\x35', '\x2', '\x229', '\x22B', '\x5', 'Z', '.', '\x2', '\x22A', 
		'\x21D', '\x3', '\x2', '\x2', '\x2', '\x22A', '\x21E', '\x3', '\x2', '\x2', 
		'\x2', '\x22A', '\x21F', '\x3', '\x2', '\x2', '\x2', '\x22A', '\x220', 
		'\x3', '\x2', '\x2', '\x2', '\x22A', '\x221', '\x3', '\x2', '\x2', '\x2', 
		'\x22A', '\x222', '\x3', '\x2', '\x2', '\x2', '\x22A', '\x223', '\x3', 
		'\x2', '\x2', '\x2', '\x22A', '\x224', '\x3', '\x2', '\x2', '\x2', '\x22A', 
		'\x225', '\x3', '\x2', '\x2', '\x2', '\x22A', '\x226', '\x3', '\x2', '\x2', 
		'\x2', '\x22A', '\x227', '\x3', '\x2', '\x2', '\x2', '\x22A', '\x228', 
		'\x3', '\x2', '\x2', '\x2', '\x22A', '\x229', '\x3', '\x2', '\x2', '\x2', 
		'\x22B', 'M', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x22D', '\x5', 'r', 
		':', '\x2', '\x22D', '\x22E', '\a', '\x4', '\x2', '\x2', '\x22E', 'O', 
		'\x3', '\x2', '\x2', '\x2', '\x22F', '\x230', '\a', '+', '\x2', '\x2', 
		'\x230', '\x231', '\a', '\x18', '\x2', '\x2', '\x231', '\x232', '\x5', 
		'r', ':', '\x2', '\x232', '\x233', '\a', '\x19', '\x2', '\x2', '\x233', 
		'\x236', '\x5', 'L', '\'', '\x2', '\x234', '\x235', '\a', ',', '\x2', 
		'\x2', '\x235', '\x237', '\x5', 'L', '\'', '\x2', '\x236', '\x234', '\x3', 
		'\x2', '\x2', '\x2', '\x236', '\x237', '\x3', '\x2', '\x2', '\x2', '\x237', 
		'Q', '\x3', '\x2', '\x2', '\x2', '\x238', '\x239', '\a', '-', '\x2', '\x2', 
		'\x239', '\x23B', '\x5', 'r', ':', '\x2', '\x23A', '\x23C', '\x5', '(', 
		'\x15', '\x2', '\x23B', '\x23A', '\x3', '\x2', '\x2', '\x2', '\x23B', 
		'\x23C', '\x3', '\x2', '\x2', '\x2', '\x23C', '\x23D', '\x3', '\x2', '\x2', 
		'\x2', '\x23D', '\x23F', '\x5', 'J', '&', '\x2', '\x23E', '\x240', '\x5', 
		'T', '+', '\x2', '\x23F', '\x23E', '\x3', '\x2', '\x2', '\x2', '\x240', 
		'\x241', '\x3', '\x2', '\x2', '\x2', '\x241', '\x23F', '\x3', '\x2', '\x2', 
		'\x2', '\x241', '\x242', '\x3', '\x2', '\x2', '\x2', '\x242', 'S', '\x3', 
		'\x2', '\x2', '\x2', '\x243', '\x248', '\a', '.', '\x2', '\x2', '\x244', 
		'\x246', '\x5', '\xAC', 'W', '\x2', '\x245', '\x244', '\x3', '\x2', '\x2', 
		'\x2', '\x245', '\x246', '\x3', '\x2', '\x2', '\x2', '\x246', '\x247', 
		'\x3', '\x2', '\x2', '\x2', '\x247', '\x249', '\x5', '\x34', '\x1B', '\x2', 
		'\x248', '\x245', '\x3', '\x2', '\x2', '\x2', '\x248', '\x249', '\x3', 
		'\x2', '\x2', '\x2', '\x249', '\x24A', '\x3', '\x2', '\x2', '\x2', '\x24A', 
		'\x24B', '\x5', 'J', '&', '\x2', '\x24B', 'U', '\x3', '\x2', '\x2', '\x2', 
		'\x24C', '\x24D', '\a', '/', '\x2', '\x2', '\x24D', '\x24E', '\a', '\x18', 
		'\x2', '\x2', '\x24E', '\x24F', '\x5', 'r', ':', '\x2', '\x24F', '\x250', 
		'\a', '\x19', '\x2', '\x2', '\x250', '\x251', '\x5', 'L', '\'', '\x2', 
		'\x251', 'W', '\x3', '\x2', '\x2', '\x2', '\x252', '\x253', '\a', '\x1C', 
		'\x2', '\x2', '\x253', '\x256', '\a', '\x18', '\x2', '\x2', '\x254', '\x257', 
		'\x5', 'Z', '.', '\x2', '\x255', '\x257', '\a', '\x4', '\x2', '\x2', '\x256', 
		'\x254', '\x3', '\x2', '\x2', '\x2', '\x256', '\x255', '\x3', '\x2', '\x2', 
		'\x2', '\x257', '\x25A', '\x3', '\x2', '\x2', '\x2', '\x258', '\x25B', 
		'\x5', 'N', '(', '\x2', '\x259', '\x25B', '\a', '\x4', '\x2', '\x2', '\x25A', 
		'\x258', '\x3', '\x2', '\x2', '\x2', '\x25A', '\x259', '\x3', '\x2', '\x2', 
		'\x2', '\x25B', '\x25D', '\x3', '\x2', '\x2', '\x2', '\x25C', '\x25E', 
		'\x5', 'r', ':', '\x2', '\x25D', '\x25C', '\x3', '\x2', '\x2', '\x2', 
		'\x25D', '\x25E', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x25F', '\x3', 
		'\x2', '\x2', '\x2', '\x25F', '\x260', '\a', '\x19', '\x2', '\x2', '\x260', 
		'\x261', '\x5', 'L', '\'', '\x2', '\x261', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'\x262', '\x265', '\x5', 'j', '\x36', '\x2', '\x263', '\x265', '\x5', 
		'N', '(', '\x2', '\x264', '\x262', '\x3', '\x2', '\x2', '\x2', '\x264', 
		'\x263', '\x3', '\x2', '\x2', '\x2', '\x265', '[', '\x3', '\x2', '\x2', 
		'\x2', '\x266', '\x268', '\a', '\x30', '\x2', '\x2', '\x267', '\x269', 
		'\a', '~', '\x2', '\x2', '\x268', '\x267', '\x3', '\x2', '\x2', '\x2', 
		'\x268', '\x269', '\x3', '\x2', '\x2', '\x2', '\x269', '\x26A', '\x3', 
		'\x2', '\x2', '\x2', '\x26A', '\x26B', '\x5', '\x86', '\x44', '\x2', '\x26B', 
		']', '\x3', '\x2', '\x2', '\x2', '\x26C', '\x26D', '\a', '\x31', '\x2', 
		'\x2', '\x26D', '\x26E', '\x5', 'L', '\'', '\x2', '\x26E', '\x26F', '\a', 
		'/', '\x2', '\x2', '\x26F', '\x270', '\a', '\x18', '\x2', '\x2', '\x270', 
		'\x271', '\x5', 'r', ':', '\x2', '\x271', '\x272', '\a', '\x19', '\x2', 
		'\x2', '\x272', '\x273', '\a', '\x4', '\x2', '\x2', '\x273', '_', '\x3', 
		'\x2', '\x2', '\x2', '\x274', '\x275', '\a', 'n', '\x2', '\x2', '\x275', 
		'\x276', '\a', '\x4', '\x2', '\x2', '\x276', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x277', '\x278', '\a', 'k', '\x2', '\x2', '\x278', '\x279', '\a', 
		'\x4', '\x2', '\x2', '\x279', '\x63', '\x3', '\x2', '\x2', '\x2', '\x27A', 
		'\x27C', '\a', '\x32', '\x2', '\x2', '\x27B', '\x27D', '\x5', 'r', ':', 
		'\x2', '\x27C', '\x27B', '\x3', '\x2', '\x2', '\x2', '\x27C', '\x27D', 
		'\x3', '\x2', '\x2', '\x2', '\x27D', '\x27E', '\x3', '\x2', '\x2', '\x2', 
		'\x27E', '\x27F', '\a', '\x4', '\x2', '\x2', '\x27F', '\x65', '\x3', '\x2', 
		'\x2', '\x2', '\x280', '\x281', '\a', '\x33', '\x2', '\x2', '\x281', '\x282', 
		'\a', '\x4', '\x2', '\x2', '\x282', 'g', '\x3', '\x2', '\x2', '\x2', '\x283', 
		'\x284', '\a', '\x34', '\x2', '\x2', '\x284', '\x285', '\x5', '~', '@', 
		'\x2', '\x285', '\x286', '\a', '\x4', '\x2', '\x2', '\x286', 'i', '\x3', 
		'\x2', '\x2', '\x2', '\x287', '\x288', '\a', '\x35', '\x2', '\x2', '\x288', 
		'\x28F', '\x5', 'n', '\x38', '\x2', '\x289', '\x28F', '\x5', '<', '\x1F', 
		'\x2', '\x28A', '\x28B', '\a', '\x18', '\x2', '\x2', '\x28B', '\x28C', 
		'\x5', 'l', '\x37', '\x2', '\x28C', '\x28D', '\a', '\x19', '\x2', '\x2', 
		'\x28D', '\x28F', '\x3', '\x2', '\x2', '\x2', '\x28E', '\x287', '\x3', 
		'\x2', '\x2', '\x2', '\x28E', '\x289', '\x3', '\x2', '\x2', '\x2', '\x28E', 
		'\x28A', '\x3', '\x2', '\x2', '\x2', '\x28F', '\x292', '\x3', '\x2', '\x2', 
		'\x2', '\x290', '\x291', '\a', '\v', '\x2', '\x2', '\x291', '\x293', '\x5', 
		'r', ':', '\x2', '\x292', '\x290', '\x3', '\x2', '\x2', '\x2', '\x292', 
		'\x293', '\x3', '\x2', '\x2', '\x2', '\x293', '\x294', '\x3', '\x2', '\x2', 
		'\x2', '\x294', '\x295', '\a', '\x4', '\x2', '\x2', '\x295', 'k', '\x3', 
		'\x2', '\x2', '\x2', '\x296', '\x298', '\x5', '<', '\x1F', '\x2', '\x297', 
		'\x296', '\x3', '\x2', '\x2', '\x2', '\x297', '\x298', '\x3', '\x2', '\x2', 
		'\x2', '\x298', '\x29F', '\x3', '\x2', '\x2', '\x2', '\x299', '\x29B', 
		'\a', '\x11', '\x2', '\x2', '\x29A', '\x29C', '\x5', '<', '\x1F', '\x2', 
		'\x29B', '\x29A', '\x3', '\x2', '\x2', '\x2', '\x29B', '\x29C', '\x3', 
		'\x2', '\x2', '\x2', '\x29C', '\x29E', '\x3', '\x2', '\x2', '\x2', '\x29D', 
		'\x299', '\x3', '\x2', '\x2', '\x2', '\x29E', '\x2A1', '\x3', '\x2', '\x2', 
		'\x2', '\x29F', '\x29D', '\x3', '\x2', '\x2', '\x2', '\x29F', '\x2A0', 
		'\x3', '\x2', '\x2', '\x2', '\x2A0', 'm', '\x3', '\x2', '\x2', '\x2', 
		'\x2A1', '\x29F', '\x3', '\x2', '\x2', '\x2', '\x2A2', '\x2A9', '\a', 
		'\x18', '\x2', '\x2', '\x2A3', '\x2A5', '\x5', '\xAC', 'W', '\x2', '\x2A4', 
		'\x2A3', '\x3', '\x2', '\x2', '\x2', '\x2A4', '\x2A5', '\x3', '\x2', '\x2', 
		'\x2', '\x2A5', '\x2A6', '\x3', '\x2', '\x2', '\x2', '\x2A6', '\x2A8', 
		'\a', '\x11', '\x2', '\x2', '\x2A7', '\x2A4', '\x3', '\x2', '\x2', '\x2', 
		'\x2A8', '\x2AB', '\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2A7', '\x3', 
		'\x2', '\x2', '\x2', '\x2A9', '\x2AA', '\x3', '\x2', '\x2', '\x2', '\x2AA', 
		'\x2AD', '\x3', '\x2', '\x2', '\x2', '\x2AB', '\x2A9', '\x3', '\x2', '\x2', 
		'\x2', '\x2AC', '\x2AE', '\x5', '\xAC', 'W', '\x2', '\x2AD', '\x2AC', 
		'\x3', '\x2', '\x2', '\x2', '\x2AD', '\x2AE', '\x3', '\x2', '\x2', '\x2', 
		'\x2AE', '\x2AF', '\x3', '\x2', '\x2', '\x2', '\x2AF', '\x2B0', '\a', 
		'\x19', '\x2', '\x2', '\x2B0', 'o', '\x3', '\x2', '\x2', '\x2', '\x2B1', 
		'\x2B3', '\a', '\x36', '\x2', '\x2', '\x2B2', '\x2B4', '\a', 's', '\x2', 
		'\x2', '\x2B3', '\x2B2', '\x3', '\x2', '\x2', '\x2', '\x2B3', '\x2B4', 
		'\x3', '\x2', '\x2', '\x2', '\x2B4', '\x2BF', '\x3', '\x2', '\x2', '\x2', 
		'\x2B5', '\x2BF', '\a', '\x37', '\x2', '\x2', '\x2B6', '\x2BF', '\a', 
		'\x38', '\x2', '\x2', '\x2B7', '\x2BF', '\a', '\x35', '\x2', '\x2', '\x2B8', 
		'\x2BF', '\a', '_', '\x2', '\x2', '\x2B9', '\x2BF', '\a', '`', '\x2', 
		'\x2', '\x2BA', '\x2BF', '\a', '\x39', '\x2', '\x2', '\x2BB', '\x2BF', 
		'\a', '\x61', '\x2', '\x2', '\x2BC', '\x2BF', '\a', '\x62', '\x2', '\x2', 
		'\x2BD', '\x2BF', '\a', '\x63', '\x2', '\x2', '\x2BE', '\x2B1', '\x3', 
		'\x2', '\x2', '\x2', '\x2BE', '\x2B5', '\x3', '\x2', '\x2', '\x2', '\x2BE', 
		'\x2B6', '\x3', '\x2', '\x2', '\x2', '\x2BE', '\x2B7', '\x3', '\x2', '\x2', 
		'\x2', '\x2BE', '\x2B8', '\x3', '\x2', '\x2', '\x2', '\x2BE', '\x2B9', 
		'\x3', '\x2', '\x2', '\x2', '\x2BE', '\x2BA', '\x3', '\x2', '\x2', '\x2', 
		'\x2BE', '\x2BB', '\x3', '\x2', '\x2', '\x2', '\x2BE', '\x2BC', '\x3', 
		'\x2', '\x2', '\x2', '\x2BE', '\x2BD', '\x3', '\x2', '\x2', '\x2', '\x2BF', 
		'q', '\x3', '\x2', '\x2', '\x2', '\x2C0', '\x2C1', '\b', ':', '\x1', '\x2', 
		'\x2C1', '\x2C2', '\a', '<', '\x2', '\x2', '\x2C2', '\x2D8', '\x5', '>', 
		' ', '\x2', '\x2C3', '\x2C4', '\a', 's', '\x2', '\x2', '\x2C4', '\x2C5', 
		'\a', '\x18', '\x2', '\x2', '\x2C5', '\x2C6', '\x5', 'r', ':', '\x2', 
		'\x2C6', '\x2C7', '\a', '\x19', '\x2', '\x2', '\x2C7', '\x2D8', '\x3', 
		'\x2', '\x2', '\x2', '\x2C8', '\x2C9', '\a', '\x18', '\x2', '\x2', '\x2C9', 
		'\x2CA', '\x5', 'r', ':', '\x2', '\x2CA', '\x2CB', '\a', '\x19', '\x2', 
		'\x2', '\x2CB', '\x2D8', '\x3', '\x2', '\x2', '\x2', '\x2CC', '\x2CD', 
		'\t', '\x6', '\x2', '\x2', '\x2CD', '\x2D8', '\x5', 'r', ':', '\x15', 
		'\x2CE', '\x2CF', '\t', '\a', '\x2', '\x2', '\x2CF', '\x2D8', '\x5', 'r', 
		':', '\x14', '\x2D0', '\x2D1', '\t', '\b', '\x2', '\x2', '\x2D1', '\x2D8', 
		'\x5', 'r', ':', '\x13', '\x2D2', '\x2D3', '\a', '\x42', '\x2', '\x2', 
		'\x2D3', '\x2D8', '\x5', 'r', ':', '\x12', '\x2D4', '\x2D5', '\a', '\x6', 
		'\x2', '\x2', '\x2D5', '\x2D8', '\x5', 'r', ':', '\x11', '\x2D6', '\x2D8', 
		'\x5', 't', ';', '\x2', '\x2D7', '\x2C0', '\x3', '\x2', '\x2', '\x2', 
		'\x2D7', '\x2C3', '\x3', '\x2', '\x2', '\x2', '\x2D7', '\x2C8', '\x3', 
		'\x2', '\x2', '\x2', '\x2D7', '\x2CC', '\x3', '\x2', '\x2', '\x2', '\x2D7', 
		'\x2CE', '\x3', '\x2', '\x2', '\x2', '\x2D7', '\x2D0', '\x3', '\x2', '\x2', 
		'\x2', '\x2D7', '\x2D2', '\x3', '\x2', '\x2', '\x2', '\x2D7', '\x2D4', 
		'\x3', '\x2', '\x2', '\x2', '\x2D7', '\x2D6', '\x3', '\x2', '\x2', '\x2', 
		'\x2D8', '\x324', '\x3', '\x2', '\x2', '\x2', '\x2D9', '\x2DA', '\f', 
		'\x10', '\x2', '\x2', '\x2DA', '\x2DB', '\a', '\x43', '\x2', '\x2', '\x2DB', 
		'\x323', '\x5', 'r', ':', '\x11', '\x2DC', '\x2DD', '\f', '\xF', '\x2', 
		'\x2', '\x2DD', '\x2DE', '\t', '\t', '\x2', '\x2', '\x2DE', '\x323', '\x5', 
		'r', ':', '\x10', '\x2DF', '\x2E0', '\f', '\xE', '\x2', '\x2', '\x2E0', 
		'\x2E1', '\t', '\a', '\x2', '\x2', '\x2E1', '\x323', '\x5', 'r', ':', 
		'\xF', '\x2E2', '\x2E3', '\f', '\r', '\x2', '\x2', '\x2E3', '\x2E4', '\t', 
		'\n', '\x2', '\x2', '\x2E4', '\x323', '\x5', 'r', ':', '\xE', '\x2E5', 
		'\x2E6', '\f', '\f', '\x2', '\x2', '\x2E6', '\x2E7', '\a', 'H', '\x2', 
		'\x2', '\x2E7', '\x323', '\x5', 'r', ':', '\r', '\x2E8', '\x2E9', '\f', 
		'\v', '\x2', '\x2', '\x2E9', '\x2EA', '\a', '\x5', '\x2', '\x2', '\x2EA', 
		'\x323', '\x5', 'r', ':', '\f', '\x2EB', '\x2EC', '\f', '\n', '\x2', '\x2', 
		'\x2EC', '\x2ED', '\a', 'I', '\x2', '\x2', '\x2ED', '\x323', '\x5', 'r', 
		':', '\v', '\x2EE', '\x2EF', '\f', '\t', '\x2', '\x2', '\x2EF', '\x2F0', 
		'\t', '\v', '\x2', '\x2', '\x2F0', '\x323', '\x5', 'r', ':', '\n', '\x2F1', 
		'\x2F2', '\f', '\b', '\x2', '\x2', '\x2F2', '\x2F3', '\t', '\f', '\x2', 
		'\x2', '\x2F3', '\x323', '\x5', 'r', ':', '\t', '\x2F4', '\x2F5', '\f', 
		'\a', '\x2', '\x2', '\x2F5', '\x2F6', '\a', 'L', '\x2', '\x2', '\x2F6', 
		'\x323', '\x5', 'r', ':', '\b', '\x2F7', '\x2F8', '\f', '\x6', '\x2', 
		'\x2', '\x2F8', '\x2F9', '\a', 'M', '\x2', '\x2', '\x2F9', '\x323', '\x5', 
		'r', ':', '\a', '\x2FA', '\x2FB', '\f', '\x5', '\x2', '\x2', '\x2FB', 
		'\x2FC', '\a', 'N', '\x2', '\x2', '\x2FC', '\x2FD', '\x5', 'r', ':', '\x2', 
		'\x2FD', '\x2FE', '\a', '=', '\x2', '\x2', '\x2FE', '\x2FF', '\x5', 'r', 
		':', '\x6', '\x2FF', '\x323', '\x3', '\x2', '\x2', '\x2', '\x300', '\x301', 
		'\f', '\x4', '\x2', '\x2', '\x301', '\x302', '\t', '\r', '\x2', '\x2', 
		'\x302', '\x323', '\x5', 'r', ':', '\x5', '\x303', '\x304', '\f', '\x1E', 
		'\x2', '\x2', '\x304', '\x323', '\t', '\x6', '\x2', '\x2', '\x305', '\x306', 
		'\f', '\x1C', '\x2', '\x2', '\x306', '\x308', '\a', '#', '\x2', '\x2', 
		'\x307', '\x309', '\x5', 'r', ':', '\x2', '\x308', '\x307', '\x3', '\x2', 
		'\x2', '\x2', '\x308', '\x309', '\x3', '\x2', '\x2', '\x2', '\x309', '\x30A', 
		'\x3', '\x2', '\x2', '\x2', '\x30A', '\x323', '\a', '$', '\x2', '\x2', 
		'\x30B', '\x30C', '\f', '\x1B', '\x2', '\x2', '\x30C', '\x30E', '\a', 
		'#', '\x2', '\x2', '\x30D', '\x30F', '\x5', 'r', ':', '\x2', '\x30E', 
		'\x30D', '\x3', '\x2', '\x2', '\x2', '\x30E', '\x30F', '\x3', '\x2', '\x2', 
		'\x2', '\x30F', '\x310', '\x3', '\x2', '\x2', '\x2', '\x310', '\x312', 
		'\a', '=', '\x2', '\x2', '\x311', '\x313', '\x5', 'r', ':', '\x2', '\x312', 
		'\x311', '\x3', '\x2', '\x2', '\x2', '\x312', '\x313', '\x3', '\x2', '\x2', 
		'\x2', '\x313', '\x314', '\x3', '\x2', '\x2', '\x2', '\x314', '\x323', 
		'\a', '$', '\x2', '\x2', '\x315', '\x316', '\f', '\x1A', '\x2', '\x2', 
		'\x316', '\x317', '\a', '%', '\x2', '\x2', '\x317', '\x323', '\x5', '\xAC', 
		'W', '\x2', '\x318', '\x319', '\f', '\x19', '\x2', '\x2', '\x319', '\x31A', 
		'\a', '\x10', '\x2', '\x2', '\x31A', '\x31B', '\x5', 'x', '=', '\x2', 
		'\x31B', '\x31C', '\a', '\x12', '\x2', '\x2', '\x31C', '\x323', '\x3', 
		'\x2', '\x2', '\x2', '\x31D', '\x31E', '\f', '\x18', '\x2', '\x2', '\x31E', 
		'\x31F', '\a', '\x18', '\x2', '\x2', '\x31F', '\x320', '\x5', '|', '?', 
		'\x2', '\x320', '\x321', '\a', '\x19', '\x2', '\x2', '\x321', '\x323', 
		'\x3', '\x2', '\x2', '\x2', '\x322', '\x2D9', '\x3', '\x2', '\x2', '\x2', 
		'\x322', '\x2DC', '\x3', '\x2', '\x2', '\x2', '\x322', '\x2DF', '\x3', 
		'\x2', '\x2', '\x2', '\x322', '\x2E2', '\x3', '\x2', '\x2', '\x2', '\x322', 
		'\x2E5', '\x3', '\x2', '\x2', '\x2', '\x322', '\x2E8', '\x3', '\x2', '\x2', 
		'\x2', '\x322', '\x2EB', '\x3', '\x2', '\x2', '\x2', '\x322', '\x2EE', 
		'\x3', '\x2', '\x2', '\x2', '\x322', '\x2F1', '\x3', '\x2', '\x2', '\x2', 
		'\x322', '\x2F4', '\x3', '\x2', '\x2', '\x2', '\x322', '\x2F7', '\x3', 
		'\x2', '\x2', '\x2', '\x322', '\x2FA', '\x3', '\x2', '\x2', '\x2', '\x322', 
		'\x300', '\x3', '\x2', '\x2', '\x2', '\x322', '\x303', '\x3', '\x2', '\x2', 
		'\x2', '\x322', '\x305', '\x3', '\x2', '\x2', '\x2', '\x322', '\x30B', 
		'\x3', '\x2', '\x2', '\x2', '\x322', '\x315', '\x3', '\x2', '\x2', '\x2', 
		'\x322', '\x318', '\x3', '\x2', '\x2', '\x2', '\x322', '\x31D', '\x3', 
		'\x2', '\x2', '\x2', '\x323', '\x326', '\x3', '\x2', '\x2', '\x2', '\x324', 
		'\x322', '\x3', '\x2', '\x2', '\x2', '\x324', '\x325', '\x3', '\x2', '\x2', 
		'\x2', '\x325', 's', '\x3', '\x2', '\x2', '\x2', '\x326', '\x324', '\x3', 
		'\x2', '\x2', '\x2', '\x327', '\x338', '\a', '\x64', '\x2', '\x2', '\x328', 
		'\x338', '\x5', '\xAA', 'V', '\x2', '\x329', '\x338', '\x5', '\xAE', 'X', 
		'\x2', '\x32A', '\x338', '\x5', '\xB0', 'Y', '\x2', '\x32B', '\x32E', 
		'\x5', '\xAC', 'W', '\x2', '\x32C', '\x32D', '\a', '#', '\x2', '\x2', 
		'\x32D', '\x32F', '\a', '$', '\x2', '\x2', '\x32E', '\x32C', '\x3', '\x2', 
		'\x2', '\x2', '\x32E', '\x32F', '\x3', '\x2', '\x2', '\x2', '\x32F', '\x338', 
		'\x3', '\x2', '\x2', '\x2', '\x330', '\x338', '\a', 'x', '\x2', '\x2', 
		'\x331', '\x338', '\x5', '\x80', '\x41', '\x2', '\x332', '\x335', '\x5', 
		'\x82', '\x42', '\x2', '\x333', '\x334', '\a', '#', '\x2', '\x2', '\x334', 
		'\x336', '\a', '$', '\x2', '\x2', '\x335', '\x333', '\x3', '\x2', '\x2', 
		'\x2', '\x335', '\x336', '\x3', '\x2', '\x2', '\x2', '\x336', '\x338', 
		'\x3', '\x2', '\x2', '\x2', '\x337', '\x327', '\x3', '\x2', '\x2', '\x2', 
		'\x337', '\x328', '\x3', '\x2', '\x2', '\x2', '\x337', '\x329', '\x3', 
		'\x2', '\x2', '\x2', '\x337', '\x32A', '\x3', '\x2', '\x2', '\x2', '\x337', 
		'\x32B', '\x3', '\x2', '\x2', '\x2', '\x337', '\x330', '\x3', '\x2', '\x2', 
		'\x2', '\x337', '\x331', '\x3', '\x2', '\x2', '\x2', '\x337', '\x332', 
		'\x3', '\x2', '\x2', '\x2', '\x338', 'u', '\x3', '\x2', '\x2', '\x2', 
		'\x339', '\x33E', '\x5', 'r', ':', '\x2', '\x33A', '\x33B', '\a', '\x11', 
		'\x2', '\x2', '\x33B', '\x33D', '\x5', 'r', ':', '\x2', '\x33C', '\x33A', 
		'\x3', '\x2', '\x2', '\x2', '\x33D', '\x340', '\x3', '\x2', '\x2', '\x2', 
		'\x33E', '\x33C', '\x3', '\x2', '\x2', '\x2', '\x33E', '\x33F', '\x3', 
		'\x2', '\x2', '\x2', '\x33F', 'w', '\x3', '\x2', '\x2', '\x2', '\x340', 
		'\x33E', '\x3', '\x2', '\x2', '\x2', '\x341', '\x346', '\x5', 'z', '>', 
		'\x2', '\x342', '\x343', '\a', '\x11', '\x2', '\x2', '\x343', '\x345', 
		'\x5', 'z', '>', '\x2', '\x344', '\x342', '\x3', '\x2', '\x2', '\x2', 
		'\x345', '\x348', '\x3', '\x2', '\x2', '\x2', '\x346', '\x344', '\x3', 
		'\x2', '\x2', '\x2', '\x346', '\x347', '\x3', '\x2', '\x2', '\x2', '\x347', 
		'\x34A', '\x3', '\x2', '\x2', '\x2', '\x348', '\x346', '\x3', '\x2', '\x2', 
		'\x2', '\x349', '\x34B', '\a', '\x11', '\x2', '\x2', '\x34A', '\x349', 
		'\x3', '\x2', '\x2', '\x2', '\x34A', '\x34B', '\x3', '\x2', '\x2', '\x2', 
		'\x34B', 'y', '\x3', '\x2', '\x2', '\x2', '\x34C', '\x34D', '\x5', '\xAC', 
		'W', '\x2', '\x34D', '\x34E', '\a', '=', '\x2', '\x2', '\x34E', '\x34F', 
		'\x5', 'r', ':', '\x2', '\x34F', '{', '\x3', '\x2', '\x2', '\x2', '\x350', 
		'\x352', '\a', '\x10', '\x2', '\x2', '\x351', '\x353', '\x5', 'x', '=', 
		'\x2', '\x352', '\x351', '\x3', '\x2', '\x2', '\x2', '\x352', '\x353', 
		'\x3', '\x2', '\x2', '\x2', '\x353', '\x354', '\x3', '\x2', '\x2', '\x2', 
		'\x354', '\x359', '\a', '\x12', '\x2', '\x2', '\x355', '\x357', '\x5', 
		'v', '<', '\x2', '\x356', '\x355', '\x3', '\x2', '\x2', '\x2', '\x356', 
		'\x357', '\x3', '\x2', '\x2', '\x2', '\x357', '\x359', '\x3', '\x2', '\x2', 
		'\x2', '\x358', '\x350', '\x3', '\x2', '\x2', '\x2', '\x358', '\x356', 
		'\x3', '\x2', '\x2', '\x2', '\x359', '}', '\x3', '\x2', '\x2', '\x2', 
		'\x35A', '\x35B', '\x5', 'r', ':', '\x2', '\x35B', '\x35C', '\a', '\x18', 
		'\x2', '\x2', '\x35C', '\x35D', '\x5', '|', '?', '\x2', '\x35D', '\x35E', 
		'\a', '\x19', '\x2', '\x2', '\x35E', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x35F', '\x361', '\a', '\x18', '\x2', '\x2', '\x360', '\x362', '\x5', 
		'r', ':', '\x2', '\x361', '\x360', '\x3', '\x2', '\x2', '\x2', '\x361', 
		'\x362', '\x3', '\x2', '\x2', '\x2', '\x362', '\x369', '\x3', '\x2', '\x2', 
		'\x2', '\x363', '\x365', '\a', '\x11', '\x2', '\x2', '\x364', '\x366', 
		'\x5', 'r', ':', '\x2', '\x365', '\x364', '\x3', '\x2', '\x2', '\x2', 
		'\x365', '\x366', '\x3', '\x2', '\x2', '\x2', '\x366', '\x368', '\x3', 
		'\x2', '\x2', '\x2', '\x367', '\x363', '\x3', '\x2', '\x2', '\x2', '\x368', 
		'\x36B', '\x3', '\x2', '\x2', '\x2', '\x369', '\x367', '\x3', '\x2', '\x2', 
		'\x2', '\x369', '\x36A', '\x3', '\x2', '\x2', '\x2', '\x36A', '\x36C', 
		'\x3', '\x2', '\x2', '\x2', '\x36B', '\x369', '\x3', '\x2', '\x2', '\x2', 
		'\x36C', '\x37A', '\a', '\x19', '\x2', '\x2', '\x36D', '\x376', '\a', 
		'#', '\x2', '\x2', '\x36E', '\x373', '\x5', 'r', ':', '\x2', '\x36F', 
		'\x370', '\a', '\x11', '\x2', '\x2', '\x370', '\x372', '\x5', 'r', ':', 
		'\x2', '\x371', '\x36F', '\x3', '\x2', '\x2', '\x2', '\x372', '\x375', 
		'\x3', '\x2', '\x2', '\x2', '\x373', '\x371', '\x3', '\x2', '\x2', '\x2', 
		'\x373', '\x374', '\x3', '\x2', '\x2', '\x2', '\x374', '\x377', '\x3', 
		'\x2', '\x2', '\x2', '\x375', '\x373', '\x3', '\x2', '\x2', '\x2', '\x376', 
		'\x36E', '\x3', '\x2', '\x2', '\x2', '\x376', '\x377', '\x3', '\x2', '\x2', 
		'\x2', '\x377', '\x378', '\x3', '\x2', '\x2', '\x2', '\x378', '\x37A', 
		'\a', '$', '\x2', '\x2', '\x379', '\x35F', '\x3', '\x2', '\x2', '\x2', 
		'\x379', '\x36D', '\x3', '\x2', '\x2', '\x2', '\x37A', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x37B', '\x37E', '\x5', 'p', '\x39', '\x2', '\x37C', 
		'\x37E', '\x5', '@', '!', '\x2', '\x37D', '\x37B', '\x3', '\x2', '\x2', 
		'\x2', '\x37D', '\x37C', '\x3', '\x2', '\x2', '\x2', '\x37E', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x37F', '\x392', '\x5', '\xAC', 'W', '\x2', 
		'\x380', '\x392', '\x5', '\x86', '\x44', '\x2', '\x381', '\x392', '\x5', 
		'\x88', '\x45', '\x2', '\x382', '\x392', '\x5', '\x8C', 'G', '\x2', '\x383', 
		'\x392', '\x5', '\x8E', 'H', '\x2', '\x384', '\x392', '\x5', '\x92', 'J', 
		'\x2', '\x385', '\x392', '\x5', '\x94', 'K', '\x2', '\x386', '\x392', 
		'\x5', '\x96', 'L', '\x2', '\x387', '\x392', '\x5', '\x9A', 'N', '\x2', 
		'\x388', '\x392', '\x5', '\x9E', 'P', '\x2', '\x389', '\x392', '\x5', 
		'\xA0', 'Q', '\x2', '\x38A', '\x392', '\a', 'k', '\x2', '\x2', '\x38B', 
		'\x392', '\a', 'n', '\x2', '\x2', '\x38C', '\x392', '\a', 'o', '\x2', 
		'\x2', '\x38D', '\x392', '\x5', '\xA8', 'U', '\x2', '\x38E', '\x392', 
		'\x5', '\xAA', 'V', '\x2', '\x38F', '\x392', '\x5', '\xB0', 'Y', '\x2', 
		'\x390', '\x392', '\x5', '\xAE', 'X', '\x2', '\x391', '\x37F', '\x3', 
		'\x2', '\x2', '\x2', '\x391', '\x380', '\x3', '\x2', '\x2', '\x2', '\x391', 
		'\x381', '\x3', '\x2', '\x2', '\x2', '\x391', '\x382', '\x3', '\x2', '\x2', 
		'\x2', '\x391', '\x383', '\x3', '\x2', '\x2', '\x2', '\x391', '\x384', 
		'\x3', '\x2', '\x2', '\x2', '\x391', '\x385', '\x3', '\x2', '\x2', '\x2', 
		'\x391', '\x386', '\x3', '\x2', '\x2', '\x2', '\x391', '\x387', '\x3', 
		'\x2', '\x2', '\x2', '\x391', '\x388', '\x3', '\x2', '\x2', '\x2', '\x391', 
		'\x389', '\x3', '\x2', '\x2', '\x2', '\x391', '\x38A', '\x3', '\x2', '\x2', 
		'\x2', '\x391', '\x38B', '\x3', '\x2', '\x2', '\x2', '\x391', '\x38C', 
		'\x3', '\x2', '\x2', '\x2', '\x391', '\x38D', '\x3', '\x2', '\x2', '\x2', 
		'\x391', '\x38E', '\x3', '\x2', '\x2', '\x2', '\x391', '\x38F', '\x3', 
		'\x2', '\x2', '\x2', '\x391', '\x390', '\x3', '\x2', '\x2', '\x2', '\x392', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\x393', '\x397', '\a', '\x10', '\x2', 
		'\x2', '\x394', '\x396', '\x5', '\x84', '\x43', '\x2', '\x395', '\x394', 
		'\x3', '\x2', '\x2', '\x2', '\x396', '\x399', '\x3', '\x2', '\x2', '\x2', 
		'\x397', '\x395', '\x3', '\x2', '\x2', '\x2', '\x397', '\x398', '\x3', 
		'\x2', '\x2', '\x2', '\x398', '\x39A', '\x3', '\x2', '\x2', '\x2', '\x399', 
		'\x397', '\x3', '\x2', '\x2', '\x2', '\x39A', '\x39B', '\a', '\x12', '\x2', 
		'\x2', '\x39B', '\x87', '\x3', '\x2', '\x2', '\x2', '\x39C', '\x39F', 
		'\x5', '\x8A', '\x46', '\x2', '\x39D', '\x39F', '\x5', '\xA2', 'R', '\x2', 
		'\x39E', '\x39C', '\x3', '\x2', '\x2', '\x2', '\x39E', '\x39D', '\x3', 
		'\x2', '\x2', '\x2', '\x39F', '\x89', '\x3', '\x2', '\x2', '\x2', '\x3A0', 
		'\x3A5', '\a', '\x32', '\x2', '\x2', '\x3A1', '\x3A5', '\a', '\x36', '\x2', 
		'\x2', '\x3A2', '\x3A5', '\a', '\x39', '\x2', '\x2', '\x3A3', '\x3A5', 
		'\x5', '\xAC', 'W', '\x2', '\x3A4', '\x3A0', '\x3', '\x2', '\x2', '\x2', 
		'\x3A4', '\x3A1', '\x3', '\x2', '\x2', '\x2', '\x3A4', '\x3A2', '\x3', 
		'\x2', '\x2', '\x2', '\x3A4', '\x3A3', '\x3', '\x2', '\x2', '\x2', '\x3A5', 
		'\x3B2', '\x3', '\x2', '\x2', '\x2', '\x3A6', '\x3A8', '\a', '\x18', '\x2', 
		'\x2', '\x3A7', '\x3A9', '\x5', '\x88', '\x45', '\x2', '\x3A8', '\x3A7', 
		'\x3', '\x2', '\x2', '\x2', '\x3A8', '\x3A9', '\x3', '\x2', '\x2', '\x2', 
		'\x3A9', '\x3AE', '\x3', '\x2', '\x2', '\x2', '\x3AA', '\x3AB', '\a', 
		'\x11', '\x2', '\x2', '\x3AB', '\x3AD', '\x5', '\x88', '\x45', '\x2', 
		'\x3AC', '\x3AA', '\x3', '\x2', '\x2', '\x2', '\x3AD', '\x3B0', '\x3', 
		'\x2', '\x2', '\x2', '\x3AE', '\x3AC', '\x3', '\x2', '\x2', '\x2', '\x3AE', 
		'\x3AF', '\x3', '\x2', '\x2', '\x2', '\x3AF', '\x3B1', '\x3', '\x2', '\x2', 
		'\x2', '\x3B0', '\x3AE', '\x3', '\x2', '\x2', '\x2', '\x3B1', '\x3B3', 
		'\a', '\x19', '\x2', '\x2', '\x3B2', '\x3A6', '\x3', '\x2', '\x2', '\x2', 
		'\x3B2', '\x3B3', '\x3', '\x2', '\x2', '\x2', '\x3B3', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x3B4', '\x3B5', '\a', 'Y', '\x2', '\x2', '\x3B5', 
		'\x3B8', '\x5', '\x90', 'I', '\x2', '\x3B6', '\x3B7', '\a', 'Z', '\x2', 
		'\x2', '\x3B7', '\x3B9', '\x5', '\x88', '\x45', '\x2', '\x3B8', '\x3B6', 
		'\x3', '\x2', '\x2', '\x2', '\x3B8', '\x3B9', '\x3', '\x2', '\x2', '\x2', 
		'\x3B9', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x3BA', '\x3BB', '\x5', 
		'\x90', 'I', '\x2', '\x3BB', '\x3BC', '\a', 'Z', '\x2', '\x2', '\x3BC', 
		'\x3BD', '\x5', '\x88', '\x45', '\x2', '\x3BD', '\x8F', '\x3', '\x2', 
		'\x2', '\x2', '\x3BE', '\x3C3', '\x5', '\xAC', 'W', '\x2', '\x3BF', '\x3C0', 
		'\a', '\x11', '\x2', '\x2', '\x3C0', '\x3C2', '\x5', '\xAC', 'W', '\x2', 
		'\x3C1', '\x3BF', '\x3', '\x2', '\x2', '\x2', '\x3C2', '\x3C5', '\x3', 
		'\x2', '\x2', '\x2', '\x3C3', '\x3C1', '\x3', '\x2', '\x2', '\x2', '\x3C3', 
		'\x3C4', '\x3', '\x2', '\x2', '\x2', '\x3C4', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x3C5', '\x3C3', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3C7', 
		'\a', '[', '\x2', '\x2', '\x3C7', '\x3C8', '\x5', '\xAC', 'W', '\x2', 
		'\x3C8', '\x93', '\x3', '\x2', '\x2', '\x2', '\x3C9', '\x3CA', '\x5', 
		'\xAC', 'W', '\x2', '\x3CA', '\x3CB', '\a', '=', '\x2', '\x2', '\x3CB', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '\x3CC', '\x3CD', '\a', '\\', '\x2', 
		'\x2', '\x3CD', '\x3D1', '\x5', '\x88', '\x45', '\x2', '\x3CE', '\x3D0', 
		'\x5', '\x98', 'M', '\x2', '\x3CF', '\x3CE', '\x3', '\x2', '\x2', '\x2', 
		'\x3D0', '\x3D3', '\x3', '\x2', '\x2', '\x2', '\x3D1', '\x3CF', '\x3', 
		'\x2', '\x2', '\x2', '\x3D1', '\x3D2', '\x3', '\x2', '\x2', '\x2', '\x3D2', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x3D3', '\x3D1', '\x3', '\x2', '\x2', 
		'\x2', '\x3D4', '\x3D5', '\a', ']', '\x2', '\x2', '\x3D5', '\x3D7', '\x5', 
		'\xA2', 'R', '\x2', '\x3D6', '\x3D8', '\x5', '\xA6', 'T', '\x2', '\x3D7', 
		'\x3D6', '\x3', '\x2', '\x2', '\x2', '\x3D7', '\x3D8', '\x3', '\x2', '\x2', 
		'\x2', '\x3D8', '\x3D9', '\x3', '\x2', '\x2', '\x2', '\x3D9', '\x3DA', 
		'\x5', '\x86', '\x44', '\x2', '\x3DA', '\x3DE', '\x3', '\x2', '\x2', '\x2', 
		'\x3DB', '\x3DC', '\a', '^', '\x2', '\x2', '\x3DC', '\x3DE', '\x5', '\x86', 
		'\x44', '\x2', '\x3DD', '\x3D4', '\x3', '\x2', '\x2', '\x2', '\x3DD', 
		'\x3DB', '\x3', '\x2', '\x2', '\x2', '\x3DE', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x3DF', '\x3E0', '\a', '\x1F', '\x2', '\x2', '\x3E0', '\x3E1', 
		'\x5', '\xAC', 'W', '\x2', '\x3E1', '\x3E3', '\a', '\x18', '\x2', '\x2', 
		'\x3E2', '\x3E4', '\x5', '\xA4', 'S', '\x2', '\x3E3', '\x3E2', '\x3', 
		'\x2', '\x2', '\x2', '\x3E3', '\x3E4', '\x3', '\x2', '\x2', '\x2', '\x3E4', 
		'\x3E5', '\x3', '\x2', '\x2', '\x2', '\x3E5', '\x3E7', '\a', '\x19', '\x2', 
		'\x2', '\x3E6', '\x3E8', '\x5', '\x9C', 'O', '\x2', '\x3E7', '\x3E6', 
		'\x3', '\x2', '\x2', '\x2', '\x3E7', '\x3E8', '\x3', '\x2', '\x2', '\x2', 
		'\x3E8', '\x3E9', '\x3', '\x2', '\x2', '\x2', '\x3E9', '\x3EA', '\x5', 
		'\x86', '\x44', '\x2', '\x3EA', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x3EB', 
		'\x3EC', '\a', '?', '\x2', '\x2', '\x3EC', '\x3ED', '\a', '\b', '\x2', 
		'\x2', '\x3ED', '\x3EE', '\x5', '\xA4', 'S', '\x2', '\x3EE', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x3EF', '\x3F0', '\a', '\x1C', '\x2', '\x2', '\x3F0', 
		'\x3F1', '\x5', '\x86', '\x44', '\x2', '\x3F1', '\x3F2', '\x5', '\x88', 
		'\x45', '\x2', '\x3F2', '\x3F3', '\x5', '\x86', '\x44', '\x2', '\x3F3', 
		'\x3F4', '\x5', '\x86', '\x44', '\x2', '\x3F4', '\x9F', '\x3', '\x2', 
		'\x2', '\x2', '\x3F5', '\x3F6', '\a', '+', '\x2', '\x2', '\x3F6', '\x3F7', 
		'\x5', '\x88', '\x45', '\x2', '\x3F7', '\x3F8', '\x5', '\x86', '\x44', 
		'\x2', '\x3F8', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x3F9', '\x3FF', 
		'\x5', '\xB0', 'Y', '\x2', '\x3FA', '\x3FF', '\a', '\x65', '\x2', '\x2', 
		'\x3FB', '\x3FF', '\a', '\x66', '\x2', '\x2', '\x3FC', '\x3FF', '\x5', 
		'\xAE', 'X', '\x2', '\x3FD', '\x3FF', '\a', '\x64', '\x2', '\x2', '\x3FE', 
		'\x3F9', '\x3', '\x2', '\x2', '\x2', '\x3FE', '\x3FA', '\x3', '\x2', '\x2', 
		'\x2', '\x3FE', '\x3FB', '\x3', '\x2', '\x2', '\x2', '\x3FE', '\x3FC', 
		'\x3', '\x2', '\x2', '\x2', '\x3FE', '\x3FD', '\x3', '\x2', '\x2', '\x2', 
		'\x3FF', '\x401', '\x3', '\x2', '\x2', '\x2', '\x400', '\x402', '\x5', 
		'\xA6', 'T', '\x2', '\x401', '\x400', '\x3', '\x2', '\x2', '\x2', '\x401', 
		'\x402', '\x3', '\x2', '\x2', '\x2', '\x402', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\x403', '\x405', '\x5', '\xAC', 'W', '\x2', '\x404', '\x406', 
		'\x5', '\xA6', 'T', '\x2', '\x405', '\x404', '\x3', '\x2', '\x2', '\x2', 
		'\x405', '\x406', '\x3', '\x2', '\x2', '\x2', '\x406', '\x409', '\x3', 
		'\x2', '\x2', '\x2', '\x407', '\x408', '\a', '\x11', '\x2', '\x2', '\x408', 
		'\x40A', '\x5', '\xA4', 'S', '\x2', '\x409', '\x407', '\x3', '\x2', '\x2', 
		'\x2', '\x409', '\x40A', '\x3', '\x2', '\x2', '\x2', '\x40A', '\xA5', 
		'\x3', '\x2', '\x2', '\x2', '\x40B', '\x40C', '\a', '=', '\x2', '\x2', 
		'\x40C', '\x40D', '\x5', '\xAC', 'W', '\x2', '\x40D', '\xA7', '\x3', '\x2', 
		'\x2', '\x2', '\x40E', '\x40F', '\a', '\x30', '\x2', '\x2', '\x40F', '\x410', 
		'\x5', '\xAC', 'W', '\x2', '\x410', '\x411', '\x5', '\x86', '\x44', '\x2', 
		'\x411', '\xA9', '\x3', '\x2', '\x2', '\x2', '\x412', '\x414', '\t', '\xE', 
		'\x2', '\x2', '\x413', '\x415', '\a', 'g', '\x2', '\x2', '\x414', '\x413', 
		'\x3', '\x2', '\x2', '\x2', '\x414', '\x415', '\x3', '\x2', '\x2', '\x2', 
		'\x415', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x416', '\x417', '\t', '\xF', 
		'\x2', '\x2', '\x417', '\xAD', '\x3', '\x2', '\x2', '\x2', '\x418', '\x41A', 
		'\a', 'h', '\x2', '\x2', '\x419', '\x418', '\x3', '\x2', '\x2', '\x2', 
		'\x41A', '\x41B', '\x3', '\x2', '\x2', '\x2', '\x41B', '\x419', '\x3', 
		'\x2', '\x2', '\x2', '\x41B', '\x41C', '\x3', '\x2', '\x2', '\x2', '\x41C', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\x41D', '\x41F', '\a', '~', '\x2', 
		'\x2', '\x41E', '\x41D', '\x3', '\x2', '\x2', '\x2', '\x41F', '\x420', 
		'\x3', '\x2', '\x2', '\x2', '\x420', '\x41E', '\x3', '\x2', '\x2', '\x2', 
		'\x420', '\x421', '\x3', '\x2', '\x2', '\x2', '\x421', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '|', '\xB7', '\xB9', '\xC7', '\xCB', '\xCE', '\xD8', 
		'\xDE', '\xE2', '\xEE', '\xF6', '\xFB', '\xFE', '\x108', '\x10B', '\x111', 
		'\x119', '\x11C', '\x125', '\x12E', '\x130', '\x136', '\x141', '\x146', 
		'\x14D', '\x15B', '\x15E', '\x165', '\x169', '\x16B', '\x170', '\x176', 
		'\x17A', '\x180', '\x185', '\x192', '\x194', '\x19A', '\x19D', '\x1A3', 
		'\x1AB', '\x1B1', '\x1BE', '\x1C1', '\x1C7', '\x1CA', '\x1D2', '\x1D5', 
		'\x1DB', '\x1DE', '\x1E2', '\x1EB', '\x1F0', '\x1F5', '\x1FD', '\x204', 
		'\x20E', '\x218', '\x22A', '\x236', '\x23B', '\x241', '\x245', '\x248', 
		'\x256', '\x25A', '\x25D', '\x264', '\x268', '\x27C', '\x28E', '\x292', 
		'\x297', '\x29B', '\x29F', '\x2A4', '\x2A9', '\x2AD', '\x2B3', '\x2BE', 
		'\x2D7', '\x308', '\x30E', '\x312', '\x322', '\x324', '\x32E', '\x335', 
		'\x337', '\x33E', '\x346', '\x34A', '\x352', '\x356', '\x358', '\x361', 
		'\x365', '\x369', '\x373', '\x376', '\x379', '\x37D', '\x391', '\x397', 
		'\x39E', '\x3A4', '\x3A8', '\x3AE', '\x3B2', '\x3B8', '\x3C3', '\x3D1', 
		'\x3D7', '\x3DD', '\x3E3', '\x3E7', '\x3FE', '\x401', '\x405', '\x409', 
		'\x414', '\x41B', '\x420',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
